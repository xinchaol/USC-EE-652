/**
 * This file is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This file defines the layout of the 'UartPacket' message type.
 */

#ifndef UARTPACKET_H
#define UARTPACKET_H
#include <message.h>

enum {
  /** The default size of this message type in bytes. */
  UARTPACKET_SIZE = 25,

  /** The Active Message type associated with this message. */
  UARTPACKET_AM_TYPE = 137,

  /* Field time: type uint32_t, offset (bits) 0, size (bits) 32 */
  /** Offset (in bytes) of the field 'time' */
  UARTPACKET_TIME_OFFSET = 0,
  /** Offset (in bits) of the field 'time' */
  UARTPACKET_TIME_OFFSETBITS = 0,
  /** Size (in bytes) of the field 'time' */
  UARTPACKET_TIME_SIZE = 4,
  /** Size (in bits) of the field 'time' */
  UARTPACKET_TIME_SIZEBITS = 32,

  /* Field field1: type uint32_t, offset (bits) 32, size (bits) 32 */
  /** Offset (in bytes) of the field 'field1' */
  UARTPACKET_FIELD1_OFFSET = 4,
  /** Offset (in bits) of the field 'field1' */
  UARTPACKET_FIELD1_OFFSETBITS = 32,
  /** Size (in bytes) of the field 'field1' */
  UARTPACKET_FIELD1_SIZE = 4,
  /** Size (in bits) of the field 'field1' */
  UARTPACKET_FIELD1_SIZEBITS = 32,

  /* Field field2: type uint32_t, offset (bits) 64, size (bits) 32 */
  /** Offset (in bytes) of the field 'field2' */
  UARTPACKET_FIELD2_OFFSET = 8,
  /** Offset (in bits) of the field 'field2' */
  UARTPACKET_FIELD2_OFFSETBITS = 64,
  /** Size (in bytes) of the field 'field2' */
  UARTPACKET_FIELD2_SIZE = 4,
  /** Size (in bits) of the field 'field2' */
  UARTPACKET_FIELD2_SIZEBITS = 32,

  /* Field field3: type uint32_t, offset (bits) 96, size (bits) 32 */
  /** Offset (in bytes) of the field 'field3' */
  UARTPACKET_FIELD3_OFFSET = 12,
  /** Offset (in bits) of the field 'field3' */
  UARTPACKET_FIELD3_OFFSETBITS = 96,
  /** Size (in bytes) of the field 'field3' */
  UARTPACKET_FIELD3_SIZE = 4,
  /** Size (in bits) of the field 'field3' */
  UARTPACKET_FIELD3_SIZEBITS = 32,

  /* Field field4: type uint16_t, offset (bits) 128, size (bits) 16 */
  /** Offset (in bytes) of the field 'field4' */
  UARTPACKET_FIELD4_OFFSET = 16,
  /** Offset (in bits) of the field 'field4' */
  UARTPACKET_FIELD4_OFFSETBITS = 128,
  /** Size (in bytes) of the field 'field4' */
  UARTPACKET_FIELD4_SIZE = 2,
  /** Size (in bits) of the field 'field4' */
  UARTPACKET_FIELD4_SIZEBITS = 16,

  /* Field field5: type uint16_t, offset (bits) 144, size (bits) 16 */
  /** Offset (in bytes) of the field 'field5' */
  UARTPACKET_FIELD5_OFFSET = 18,
  /** Offset (in bits) of the field 'field5' */
  UARTPACKET_FIELD5_OFFSETBITS = 144,
  /** Size (in bytes) of the field 'field5' */
  UARTPACKET_FIELD5_SIZE = 2,
  /** Size (in bits) of the field 'field5' */
  UARTPACKET_FIELD5_SIZEBITS = 16,

  /* Field field6: type uint16_t, offset (bits) 160, size (bits) 16 */
  /** Offset (in bytes) of the field 'field6' */
  UARTPACKET_FIELD6_OFFSET = 20,
  /** Offset (in bits) of the field 'field6' */
  UARTPACKET_FIELD6_OFFSETBITS = 160,
  /** Size (in bytes) of the field 'field6' */
  UARTPACKET_FIELD6_SIZE = 2,
  /** Size (in bits) of the field 'field6' */
  UARTPACKET_FIELD6_SIZEBITS = 16,

  /* Field field7: type uint8_t, offset (bits) 176, size (bits) 8 */
  /** Offset (in bytes) of the field 'field7' */
  UARTPACKET_FIELD7_OFFSET = 22,
  /** Offset (in bits) of the field 'field7' */
  UARTPACKET_FIELD7_OFFSETBITS = 176,
  /** Size (in bytes) of the field 'field7' */
  UARTPACKET_FIELD7_SIZE = 1,
  /** Size (in bits) of the field 'field7' */
  UARTPACKET_FIELD7_SIZEBITS = 8,

  /* Field field8: type uint8_t, offset (bits) 184, size (bits) 8 */
  /** Offset (in bytes) of the field 'field8' */
  UARTPACKET_FIELD8_OFFSET = 23,
  /** Offset (in bits) of the field 'field8' */
  UARTPACKET_FIELD8_OFFSETBITS = 184,
  /** Size (in bytes) of the field 'field8' */
  UARTPACKET_FIELD8_SIZE = 1,
  /** Size (in bits) of the field 'field8' */
  UARTPACKET_FIELD8_SIZEBITS = 8,

  /* Field type: type uint8_t, offset (bits) 192, size (bits) 8 */
  /** Offset (in bytes) of the field 'type' */
  UARTPACKET_TYPE_OFFSET = 24,
  /** Offset (in bits) of the field 'type' */
  UARTPACKET_TYPE_OFFSETBITS = 192,
  /** Size (in bytes) of the field 'type' */
  UARTPACKET_TYPE_SIZE = 1,
  /** Size (in bits) of the field 'type' */
  UARTPACKET_TYPE_SIZEBITS = 8,
};

/**
 * Return the value of the field 'time'
 */
uint32_t UartPacket_time_get(tmsg_t *msg);

/**
 * Set the value of the field 'time'
 */
void UartPacket_time_set(tmsg_t *msg, uint32_t value);

/**
 * Return the value of the field 'field1'
 */
uint32_t UartPacket_field1_get(tmsg_t *msg);

/**
 * Set the value of the field 'field1'
 */
void UartPacket_field1_set(tmsg_t *msg, uint32_t value);

/**
 * Return the value of the field 'field2'
 */
uint32_t UartPacket_field2_get(tmsg_t *msg);

/**
 * Set the value of the field 'field2'
 */
void UartPacket_field2_set(tmsg_t *msg, uint32_t value);

/**
 * Return the value of the field 'field3'
 */
uint32_t UartPacket_field3_get(tmsg_t *msg);

/**
 * Set the value of the field 'field3'
 */
void UartPacket_field3_set(tmsg_t *msg, uint32_t value);

/**
 * Return the value of the field 'field4'
 */
uint16_t UartPacket_field4_get(tmsg_t *msg);

/**
 * Set the value of the field 'field4'
 */
void UartPacket_field4_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'field5'
 */
uint16_t UartPacket_field5_get(tmsg_t *msg);

/**
 * Set the value of the field 'field5'
 */
void UartPacket_field5_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'field6'
 */
uint16_t UartPacket_field6_get(tmsg_t *msg);

/**
 * Set the value of the field 'field6'
 */
void UartPacket_field6_set(tmsg_t *msg, uint16_t value);

/**
 * Return the value of the field 'field7'
 */
uint8_t UartPacket_field7_get(tmsg_t *msg);

/**
 * Set the value of the field 'field7'
 */
void UartPacket_field7_set(tmsg_t *msg, uint8_t value);

/**
 * Return the value of the field 'field8'
 */
uint8_t UartPacket_field8_get(tmsg_t *msg);

/**
 * Set the value of the field 'field8'
 */
void UartPacket_field8_set(tmsg_t *msg, uint8_t value);

/**
 * Return the value of the field 'type'
 */
uint8_t UartPacket_type_get(tmsg_t *msg);

/**
 * Set the value of the field 'type'
 */
void UartPacket_type_set(tmsg_t *msg, uint8_t value);

#endif
