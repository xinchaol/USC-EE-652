<nesc xmlns="http://www.tinyos.net/nesC">
  <components>
    <component qname="BcpCollectionExampleAppC" loc="3:BcpCollectionExampleAppC.nc">
      <configuration/>
    </component>
    <component qname="BcpCollectionExampleC" loc="7:BcpCollectionExampleC.nc">
      <module/>
    </component>
    <component qname="MainC" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/MainC.nc">
      <configuration/>
    </component>
    <component qname="PlatformC" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/sim/PlatformC.nc">
      <documentation loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="10:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="18:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="12:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:27">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:23">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:22">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:21">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:20">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:19">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:18">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:17">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:16">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:3">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="10:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/sim/MeasureClockC.nc">
      <documentation loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/sim/MeasureClockC.nc">
        <short>&#10; Simulation version of MeasureClockC for the mica platform.</short>
        <long>&#10; Simulation version of MeasureClockC for the mica platform. See &#10; tos/platforms/mica/MeasureClockC.nc for more details.&#10;&#10; @author Phil Levis&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMainP" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMainP.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TinySchedulerC.nc">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TinySchedulerC.nc">
        <short>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).</short>
        <long>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SimSchedulerBasicP" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMoteP" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <documentation loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/CC2420.h">
        <short>&#10; Ideally, your receive history size should be equal to the number of&#10; RF neighbors your node will have&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaP" loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaP.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/LedsC.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/LedsP.nc" safe="">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/ActiveMessageC.nc">
      <documentation loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the micaZ platform.</short>
        <long>&#10;&#10; The Active Message layer on the micaZ platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="TossimActiveMessageP" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/TossimActiveMessageP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/TossimActiveMessageP.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaC.nc">
      <configuration/>
    </component>
    <component qname="CC2420ControlC" loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlC.nc">
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <module/>
    </component>
    <component qname="CpmModelC" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/packet/sim/CC2420PacketC.nc">
      <configuration/>
    </component>
    <component qname="TossimPacketModelC" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.h">
        <short>&#10;&#10; Configuration parameters for a CSMA link.</short>
        <long>&#10;&#10; Configuration parameters for a CSMA link.&#10;&#10; @author Philip Levis&#10; @date   Dec 10 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketP" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/packet/sim/CC2420PacketP.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/packet/sim/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="NetworkC" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/NetworkC.nc">
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <documentation loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
        <short>&#10; Accessor methods for Active Messages.</short>
        <long>&#10; Accessor methods for Active Messages.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):/home/xinchaol/local/src/tinyos-2.x/tos/system/StateC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateImplC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateImplP.nc" safe="">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/system/RandomC.nc">
      <documentation loc="22:/home/xinchaol/local/src/tinyos-2.x/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="21:/home/xinchaol/local/src/tinyos-2.x/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueReceiveC" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplC" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):/home/xinchaol/local/src/tinyos-2.x/tos/system/StateC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BcpC" loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpC.nc">
      <configuration/>
    </component>
    <component qname="BcpForwardingEngineP" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <module/>
    </component>
    <component qname="BcpRoutingEngineP" loc="2:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRoutingEngineP.nc">
      <module/>
    </component>
    <component qname="BcpC.MessagePoolP" loc="41(BcpC.MessagePoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
          <value cst="I:17">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.MessagePoolP.PoolP" loc="53(BcpC.MessagePoolP.PoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40cd5b50"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.QEntryPoolP" loc="41(BcpC.QEntryPoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:28" alignment="I:4"><struct-ref ref="0x40ba8998"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ba8da0"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.QEntryPoolP.PoolP" loc="53(BcpC.QEntryPoolP.PoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40cd5b50"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.SnoopPoolP" loc="41(BcpC.SnoopPoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.SnoopPoolP.PoolP" loc="53(BcpC.SnoopPoolP.PoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40cd5b50"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.SendStack" loc="45(BcpC.SendStack):/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
        <short>&#10;  A general Stack component, having a bounded size.</short>
        <long>&#10;  A general Stack component, having a bounded size.&#10;&#10;  Derived from StackC, work of:&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10; -------------------------&#10;  @author Scott Moeller&#10;  @date   $Date: 2010/03/24 00:23:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StackC"/>
        <arguments>
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:28" alignment="I:4"><struct-ref ref="0x40ba8998"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ba8da0"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:11">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.SnoopQueue" loc="42(BcpC.SnoopQueue):/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
              <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.RoutingBeaconTimer" loc="36(BcpC.RoutingBeaconTimer):/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliP.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/sim/HilTimerMilliC.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/sim/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406d0a28"/>
            <typename><typedef-ref name="TMilli" ref="0x406d0bf0"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40d9f918"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncC.nc">
        <short>&#10; The TOSSIM implementation of the Atm128 Timer0.</short>
        <long>&#10; The TOSSIM implementation of the Atm128 Timer0. It is built from a&#10; timer-specific counter component and a generic compare&#10; component. The counter component has an additional simulation-only&#10; interface to let the compare component know when its state has&#10; changed (e.g., TCNTX was set).&#10;&#10; @date November 22 2005&#10;&#10; @author Philip Levis &#60;pal@cs.stanford.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <documentation loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406d0a28"/>
            <typename><typedef-ref name="TMilli" ref="0x406d0bf0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406d0a28"/>
            <typename><typedef-ref name="TMilli" ref="0x406d0bf0"/></typename>
          </type-tag>
          <value cst="I:6">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406d0a28"/>
            <typename><typedef-ref name="TMilli" ref="0x406d0bf0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.txRetryTimer" loc="36(BcpC.txRetryTimer):/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.DelayPacketTimer" loc="36(BcpC.DelayPacketTimer):/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.DataSend" loc="39(BcpC.DataSend):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:145">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.DataSend.AMQueueEntryP" loc="35(BcpC.DataSend.AMQueueEntryP):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.DataReceive" loc="35(BcpC.DataReceive):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:145">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.DataSnoop" loc="36(BcpC.DataSnoop):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSnooperC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSnooperC"/>
        <arguments>
          <value cst="I:145">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.BeaconSend" loc="39(BcpC.BeaconSend):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:144">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpC.BeaconSend.AMQueueEntryP" loc="35(BcpC.BeaconSend.AMQueueEntryP):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpC.BeaconReceive" loc="35(BcpC.BeaconReceive):/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:144">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="DummyActiveMessageP" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/DummyActiveMessageP.nc">
      <module/>
    </component>
    <component qname="BcpRateControllerC" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerC.nc">
      <configuration/>
    </component>
    <component qname="BcpRateControllerP" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerP.nc">
      <module/>
    </component>
    <component qname="BcpRateControllerC.exponentialRandom" loc="1(BcpRateControllerC.exponentialRandom):/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomC.nc">
      <instance number="0">
        <component-ref qname="exponentialRandomC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpRateControllerC.exponentialRandom.exponentialRandomM" loc="1(BcpRateControllerC.exponentialRandom.exponentialRandomM):/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomM.nc">
      <instance number="0">
        <component-ref qname="exponentialRandomM"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpRateControllerC.modPool" loc="41(BcpRateControllerC.modPool):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpRateControllerC.modPool.PoolP" loc="53(BcpRateControllerC.modPool.PoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40cd5b50"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpRateControllerC.modQueue" loc="42(BcpRateControllerC.modQueue):/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
              <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpRateControllerC.admissionTimer" loc="36(BcpRateControllerC.admissionTimer):/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpCollectionExampleAppC.RandomC" loc="1(BcpCollectionExampleAppC.RandomC):/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomC.nc">
      <instance number="1">
        <component-ref qname="exponentialRandomC"/>
        <arguments>
          <value cst="I:666">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpCollectionExampleAppC.RandomC.exponentialRandomM" loc="1(BcpCollectionExampleAppC.RandomC.exponentialRandomM):/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomM.nc">
      <instance number="1">
        <component-ref qname="exponentialRandomM"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpCollectionExampleAppC.TimerMilliC" loc="36(BcpCollectionExampleAppC.TimerMilliC):/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpCollectionExampleAppC.sinkTimer" loc="36(BcpCollectionExampleAppC.sinkTimer):/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpCollectionExampleAppC.SafeSerialSend" loc="1(BcpCollectionExampleAppC.SafeSerialSend):SafeSerialSendC.nc">
      <instance number="0">
        <component-ref qname="SafeSerialSendC"/>
        <arguments>
          <value cst="I:20">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="I:137">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SafeSerialSendM" loc="1:SafeSerialSendM.nc">
      <module/>
    </component>
    <component qname="BcpCollectionExampleAppC.SafeSerialSend.QueueC" loc="42(BcpCollectionExampleAppC.SafeSerialSend.QueueC):/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
              <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BcpCollectionExampleAppC.SafeSerialSend.PoolC" loc="41(BcpCollectionExampleAppC.SafeSerialSend.PoolC):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BcpCollectionExampleAppC.SafeSerialSend.PoolC.PoolP" loc="53(BcpCollectionExampleAppC.SafeSerialSend.PoolC.PoolP):/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40cd5b50"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc">
      <documentation loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40d9f918" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40d9f918"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40d9fad8" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40818d40" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40815010" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40815238" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40815428" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PoolC" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc" abstract="">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0x40cd5b50" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40cd5b50"/></type-var>
        </typedef>
        <constant name="POOL_SIZE" ref="0x40cd5d70" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="StackC" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc" abstract="">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
        <short>&#10;  A general Stack component, having a bounded size.</short>
        <long>&#10;  A general Stack component, having a bounded size.&#10;&#10;  Derived from StackC, work of:&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10; -------------------------&#10;  @author Scott Moeller&#10;  @date   $Date: 2010/03/24 00:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="stack_t" ref="0x40d24898" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
          <component-ref qname="StackC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="stack_t" scoped="" ref="0x40d24898"/></type-var>
        </typedef>
        <constant name="STACK_SIZE" ref="0x40d24ac0" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
          <component-ref qname="StackC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SafeSerialSendC" loc="1:SafeSerialSendC.nc" abstract="">
      <parameters>
        <constant name="QUEUE_SIZE" ref="0x40faf8f8" loc="1:SafeSerialSendC.nc">
          <component-ref qname="SafeSerialSendC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="SERIAL_ADDR" ref="0x40fafb40" loc="1:SafeSerialSendC.nc">
          <component-ref qname="SafeSerialSendC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PoolP" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc" abstract="">
      <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0x40d10058" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40d10058"/></type-var>
        </typedef>
        <constant name="size" ref="0x40d10248" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40870930" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40870b58" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40870d80" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x4086d010" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40e99e50" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40e99e50"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x40e96068" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x40ee77e8" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40820978" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40820b90" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40820da8" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="exponentialRandomC" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomC.nc" abstract="">
      <parameters>
        <constant name="mean_g" ref="0x40f99010" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomC.nc">
          <component-ref qname="exponentialRandomC"/>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMReceiverC" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x40f1c3b8" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40d6a588" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40d6a588"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="StateC" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateC.nc" abstract="">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="QueueC" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc" abstract="">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x40d672d0" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x40d672d0"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x40d674f8" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40dc9c18" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40dc9c18"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40dc9dd8" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40efb460" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x40ef4010" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="exponentialRandomM" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomM.nc" abstract="">
      <parameters>
        <constant name="mean_g" ref="0x40f98738" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomM.nc">
          <component-ref qname="exponentialRandomM"/>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40ed7628" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40ed7628"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMSnooperC" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSnooperC.nc" abstract="">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40f4ee88" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMSnooperC.nc">
          <component-ref qname="AMSnooperC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="RootControl" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/RootControl.nc">
      <documentation loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/RootControl.nc">
        <short> Controls whether the current node is a root of the tree&#10;  </short>
        <long> Controls whether the current node is a root of the tree&#10;  @author Rodrigo Fonseca&#10;  @date   $Date: 2006/12/12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isRoot" ref="0x406e32c0" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoot" ref="0x406e6ae0" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="unsetRoot" ref="0x406e6ed8" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision$ $Date$&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x40900c28" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x409008c0" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x40900ac8" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x40901ef0" loc="86:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x40901910" loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x40901520" loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x409017b0" loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x409031c0" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40903068" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x40900440" loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x409025e8" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x40902490" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x40903b58" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x40903a00" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x408fe720" loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="107:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x40901010" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x40902e80" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x408fe1d8" loc="105:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x40902010" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x40907b90" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x409035d0" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x40902a28" loc="70:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
          <long>&#10; Change the PAN address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x406cf438" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x406cf2e0" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x406ce1c0" loc="117:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x406ce068" loc="117:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x406d2bd8" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x406cf948" loc="109:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionPacket" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x40b9db18" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b9d7c0" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0x40b9d9b8" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0x40b9f010" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40ba0c90" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x40ba0e98" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40b9fd58" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0x40ba3f20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b9f9d0" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0x40b9fbf8" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0x40ba3f20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0x40ba0890" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40ba0738" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x40b9d370" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b9d218" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0x40b9f5e8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0x40ba3f20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b9f490" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x408ef458" loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408ef300" loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x408f0328" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408f01d0" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x408f14b0" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x408f1358" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x408f4d28" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x408f4bd0" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x408f1aa8" loc="73:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x408f1950" loc="73:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x408f0bd8" loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408f0a80" loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
      <documentation loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x406d3ce8" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
        <documentation loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SendNotifier.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x4097d560" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SendNotifier.nc">
        <documentation loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x4097d1e8" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x4097d400" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Pool" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
        <short>&#10;  An allocation pool of a specific type memory objects.</short>
        <long>&#10;  An allocation pool of a specific type memory objects.&#10;  The Pool allows components to allocate (&#60;code>get&#60;/code>)&#10;  and deallocate (&#60;code>put&#60;/code>) elements. The pool&#10;  does not require that deallocations be items which were&#10;  originally allocated. E.g., a program can create two&#10;  pools of the same type and pass items between them.&#10;  This allows, for example, a component to allocate a pool&#10;  of message buffers and freely buffer swap them on&#10;  Receive.receive events.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40bb69f8" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
          <interfacedef-ref qname="Pool"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bb69f8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40bb1770" loc="97:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Allocate an element from the pool.</short>
          <long>&#10; Allocate an element from the pool.&#10;&#10; @return 't* ONE_NOK' A pointer if the pool is not empty, NULL if&#10; the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bb69f8"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40bb2938" loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).</short>
          <long>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10; @return Maximum size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x40bb6e98" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Returns whether there any elements remaining in the pool.</short>
          <long>&#10; Returns whether there any elements remaining in the pool.&#10; If empty returns TRUE, then &#60;code>get&#60;/code> will return&#10; NULL. If empty returns FALSE, then &#60;code>get&#60;/code> will&#10; return a pointer to an object.&#10;&#10; @return Whether the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="put" ref="0x40bb1010" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="82:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Deallocate an object, putting it back into the pool.</short>
          <long>&#10; Deallocate an object, putting it back into the pool.&#10;&#10; @param 't* ONE newVal'&#10; @return SUCCESS if the entry was put in successfully, FAIL&#10; if the pool is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bb69f8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40bb2de8" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bb69f8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x40bb2400" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
        <documentation loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Pool.nc">
          <short>&#10; Returns how many elements are in the pool.</short>
          <long>&#10; Returns how many elements are in the pool. If size&#10; returns 0, empty() will return TRUE. If size returns&#10; a non-zero value, empty() will return FALSE. The&#10; return value of size is always &#38;lte; the return&#10; value of maxSize().&#10;&#10; @return How many elements are in the pool.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x406b4888" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x406b4da0" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x40de1ce8" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x40ddf1c8" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x40de18d0" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x40ddf688" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x40db5de8" loc="21:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d909c0"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x40d90be8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x40de13f0" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d909c0"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x40d90be8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x40de1298" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d909c0"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x40d90be8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40d6dcf0" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40d6dcf0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40d691f0" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
      <documentation loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x406e56f8" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406e55a0" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x406ee168" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ee010" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40701208" loc="115:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="98:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40702e88" loc="115:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40701088" loc="115:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x407028a0" loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x406eedc8" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406eea88" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406eec68" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40bcd268" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bcd268"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x40bca468" loc="73:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bcd268"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x40bc9330" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bcd268"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40bc91d8" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bcd268"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x401ba740"/>
              <value-structured>
                <type-tag size="I:0" alignment="I:1"><attribute-ref name="one" ref="0x401ba740"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x40bc9c28" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bcd268"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40bc9ad0" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40bca038" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x40bcab10" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bcd268"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x40bcd708" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x40bcdb50" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
        <documentation loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BcpCongestionIF" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpCongestionIF.nc">
      <function event="" provided="0" name="congestionNotify" ref="0x40b9c570" loc="2:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpCongestionIF.nc">
        <interfacedef-ref qname="BcpCongestionIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="noCongestionNotify" ref="0x40b9c978" loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpCongestionIF.nc">
        <interfacedef-ref qname="BcpCongestionIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="updateRateControlInfo" ref="0x40bc1170" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpCongestionIF.nc">
        <interfacedef-ref qname="BcpCongestionIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reVal" ref="0x40b9cde0" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpCongestionIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="seqNo" ref="0x40bc1010" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpCongestionIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40979cc0" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x40979760" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x40979978" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40979b58" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40973a88" loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="115:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40973728" loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40973908" loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x409731c8" loc="112:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="102:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40976b80" loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40976a28" loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40974898" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="87:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40974540" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x40974738" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x4097f388" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x4097f030" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x4097f228" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x4097fa10" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x401be4b8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x4097f8b8" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x40986b58" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x40986a00" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x4097e168" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x4097e010" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision$ $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x409c0450" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x409c0450"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x409c0900" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x409bd170" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x409c0450"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x409c0d80" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x409bd010" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x409c0450"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Random.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x40717570" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Random.nc">
        <documentation loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x407170c8" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Random.nc">
        <documentation loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x40dc0bd0" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d93660"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40d93888"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x40db61a8" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8d840"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40d8da68"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x40db76e0" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8e130"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40d8e358"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x40db7ce8" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8e130"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40d8e358"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x40db7b90" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8e130"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40d8e358"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x40db67b0" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8d840"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40d8da68"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x40db6658" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8d840"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40d8da68"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x40db7228" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d93660"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40d93888"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40db70d0" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d93660"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40d93888"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x406f6170" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f5d60" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406f6010" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x406f1dd0" loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="104:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f1a70" loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406f1c50" loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x406f1510" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x406f6db0" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f6c58" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x406f3ba0" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f3848" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x406f3a40" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BcpDebugIF" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
      <function command="" provided="0" name="reportBackpressure" ref="0x407138b8" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
        <documentation loc="2:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
          <short>&#10; Notifies upper layer of a change to the local&#10;  backpressure level.</short>
          <long>&#10; Notifies upper layer of a change to the local&#10;  backpressure level.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpDebugIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dataQueueSize_p" ref="0x40719b88" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="virtualQueueSize_p" ref="0x40719e10" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="localTXCount_p" ref="0x40713088" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="origin_p" ref="0x407132a0" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
          <variable name="originSeqNo_p" ref="0x407134e8" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
          <variable name="reportSource_p" ref="0x40713738" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportError" ref="0x40713ea8" loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
        <documentation loc="8:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
          <short>&#10; Notifies the application layer of an error&#10;</short>
        </documentation>
        <interfacedef-ref qname="BcpDebugIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type_p" ref="0x40713d50" loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportLinkRate" ref="0x40710010" loc="16:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
        <documentation loc="13:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
          <short>&#10; Notifies upper layer of an update to the estimated link transmission time&#10;</short>
        </documentation>
        <interfacedef-ref qname="BcpDebugIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40711340" loc="16:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
          <variable name="previousLinkPacketTxTime_p" ref="0x40711618" loc="16:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="updateLinkPacketTxTime_p" ref="0x407118f0" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="newLinkPacketTxTime" ref="0x40711b80" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="latestLinkPacktLossEst" ref="0x40711e40" loc="18:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reportValues" ref="0x4070f5d0" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
        <documentation loc="20:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
          <short>&#10; Used to debug&#10;</short>
        </documentation>
        <interfacedef-ref qname="BcpDebugIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="field1_p" ref="0x407104a0" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="field2_p" ref="0x407106c8" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="field3_p" ref="0x407108f0" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="field4_p" ref="0x40710b18" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="field5_p" ref="0x40710d50" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="field6_p" ref="0x4070f010" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="field7_p" ref="0x4070f228" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
          <variable name="field8_p" ref="0x4070f440" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpDebugIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getLocalSleepInterval" ref="0x40b61b10" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxDutyCycle" ref="0x40b84168" loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="109:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's duty cycle configured in this message&#10;     in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b84010" loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sleepIntervalToDutyCycle" ref="0x40b83390" loc="130:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; </short>
          <long>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; @param sleepInterval The sleep interval in units of [ms]&#10; @return The duty cycle in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepInterval" ref="0x40b83238" loc="130:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalDutyCycle" ref="0x40b607c0" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return this node's radio duty cycle rate, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxSleepInterval" ref="0x40b5f060" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="84:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param sleepInterval The receiving node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b60c80" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="sleepIntervalMs" ref="0x40b60ee8" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalDutyCycle" ref="0x40b60168" loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].</short>
          <long>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].&#10; For example, to get a 0.05% duty cycle,&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(5);&#10; &#60;/code>&#10;&#10; For a 100% duty cycle (always on),&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(10000);&#10; &#60;/code>&#10;&#10; This is the equivalent of setting the local sleep interval explicitly.&#10; &#10; @param dutyCycle The duty cycle percentage, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x40b60010" loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxDutyCycle" ref="0x40b5e680" loc="107:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="98:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.&#10; Duty cycle is in units of [percentage*100], i.e. 0.25% duty cycle = 25.&#10; &#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param dutyCycle The duty cycle of the receiving mote, in units of &#10;     [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b5e2f0" loc="107:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dutyCycle" ref="0x40b5e520" loc="107:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dutyCycleToSleepInterval" ref="0x40b84b68" loc="122:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="116:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; </short>
          <long>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; @param dutyCycle The duty cycle in units of [percentage*100]&#10; @return The equivalent sleep interval, in units of [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x40b84a10" loc="122:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxSleepInterval" ref="0x40b5faf0" loc="96:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's sleep interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40b5f998" loc="96:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalSleepInterval" ref="0x40b614e0" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
        <documentation loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio sleep interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio sleep interval, in milliseconds.&#10; Once every interval, the node will sleep and perform an Rx check &#10; on the radio.  Setting the sleep interval to 0 will keep the radio&#10; always on.&#10;&#10; This is the equivalent of setting the local duty cycle rate.&#10;&#10; @param sleepIntervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepIntervalMs" ref="0x40b61388" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x40b228d8" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x40b228d8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x40b22f28" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x40b228d8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x40b22dd0" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x40b228d8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40da73b8" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40da73b8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40da7520" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40da5810" loc="98:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40da64d0" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40da51c8" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40da6e48" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          </variable>
          <variable name="dt" ref="0x40da5068" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40da6940" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40da5ca0" loc="105:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40da7b50" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40da79f8" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da7520"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40da6070" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Init.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x407d70f8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Init.nc">
        <documentation loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x40db95c0" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40db95c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x40db24f0" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40db4498" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40db9ab8" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40db95c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40db48a0" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40db2950" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40db4058" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40db95c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40db9ee8" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40db95c0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40db4ca8" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40db20c8" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getHeader" ref="0x4091a188" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
        <documentation loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:8" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x4067ba10"/>
              <typename><typedef-ref name="tossim_header_t" ref="0x4068d648"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4091a010" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x4091a838" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
        <documentation loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:6" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x4068de20"/>
              <typename><typedef-ref name="tossim_metadata_t" ref="0x4068c8a0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4091a6c0" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x406f8578" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
              <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f8030" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x406f8210" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406f83f0" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Stack" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <short>&#10;  Interface to a Stack list (top / bottom accessibility) &#10;  that contains items of a specific type.</short>
        <long>&#10;  Interface to a Stack list (top / bottom accessibility) &#10;  that contains items of a specific type. &#10;  The stack has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Scott Moeller&#10;  @date   $Date: 2010/03/24 00:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40bafc38" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <interfacedef-ref qname="Stack"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="top" ref="0x40bd6e18" loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Get the top of the stack without removing it.</short>
          <long>&#10; Get the top of the stack without removing it. If the stack&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The top of the stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="pushTop" ref="0x40bd4a20" loc="108:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Push an element to the top of the stack.</short>
          <long>&#10; Push an element to the top of the stack.&#10;&#10; @param 't ONE newVal' - the element to push&#10; @return SUCCESS if the element was pushed successfully, FAIL&#10;                 if it was not pushed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40bd48c8" loc="108:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x401ba740"/>
              <value-structured>
                <type-tag size="I:0" alignment="I:1"><attribute-ref name="one" ref="0x401ba740"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pushBottom" ref="0x40bd2368" loc="117:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Push an element to the bottom of the stack.</short>
          <long>&#10; Push an element to the bottom of the stack.&#10;&#10; @param 't ONE newVal' - the element to push&#10; @return SUCCESS if the element was pushed successfully, FAIL&#10;                 if it was not pushed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40bd2210" loc="117:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x401ba740"/>
              <value-structured>
                <type-tag size="I:0" alignment="I:1"><attribute-ref name="one" ref="0x401ba740"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x40bd2c58" loc="128:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="119:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Return the nth element of the stack without altering it, &#10; where 0 is the bottom of the stack and (size - 1) is the top.</short>
          <long>&#10; Return the nth element of the stack without altering it, &#10; where 0 is the bottom of the stack and (size - 1) is the top. &#10; If the element requested is larger than the current stack size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40bd2b00" loc="128:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="popBottom" ref="0x40bd4210" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Pop the bottom of the stack.</short>
          <long>&#10; Pop the bottom of the stack. If the stack is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The bottom of the stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="popTop" ref="0x40bd34c0" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Pop the top of the stack.</short>
          <long>&#10; Pop the top of the stack. If the stack is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The top of the stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40bd69f8" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; The maximum number of elements the stack can hold.</short>
          <long>&#10; The maximum number of elements the stack can hold.&#10;&#10; @return The maximum stack size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="bottom" ref="0x40bd3b30" loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Get the bottom of the stack without removing it.</short>
          <long>&#10; Get the bottom of the stack without removing it. If the stack&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The bottom of the stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40bafc38"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x40bd60f8" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; Returns if the stack is empty.</short>
          <long>&#10; Returns if the stack is empty.&#10;&#10; @return Whether the stack is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x40bd6540" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
        <documentation loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Stack.nc">
          <short>&#10; The number of elements currently in the stack.</short>
          <long>&#10; The number of elements currently in the stack.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the stack.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Stack"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SimMote" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <short>&#10; TOSSIM-specific interface to access a mote's state.</short>
        <long>&#10; TOSSIM-specific interface to access a mote's state. TinyOS programs&#10; should never use this interface.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="setEuid" ref="0x408cd6d8" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="euid" ref="0x408cd580" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getVariableInfo" ref="0x408cc840" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0x401b6498"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x408cc308" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="ptr" ref="0x408cc4e0" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-pointer size="I:4" alignment="I:4">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x408cc6d8" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
                <typename><typedef-ref name="size_t" ref="0x401b6498"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOff" ref="0x408ca010" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x408ccbd0" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getEuid" ref="0x408cd1a8" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRadioChannel" ref="0x408ca628" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newRadioChannel" ref="0x408ca4d0" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x408cded8" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRadioChannel" ref="0x408caa78" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartTime" ref="0x408cdb08" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Set" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Set.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Set.nc">
        <short>&#10; The Set interface is intended for synchronous writing of small&#10; values.</short>
        <long>&#10; The Set interface is intended for synchronous writing of small&#10; values. The type of the value is given as a template&#10; argument. Generally, these values are backed by memory or&#10; computation. Because no error code is included, the set() call must&#10; be guaranteed to succeed.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be stored&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision$ $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40f609f0" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Set.nc">
          <interfacedef-ref qname="Set"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40f609f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="set" ref="0x40f5d010" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Set.nc">
        <documentation loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Set.nc">
          <short>&#10; Stores a value of type val_t.</short>
          <long>&#10; Stores a value of type val_t.&#10;&#10; @param val the value to be stored&#10;</long>
        </documentation>
        <interfacedef-ref qname="Set"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40f609f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40f60e50" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Set.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40f609f0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x40b33158" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x40b342f0" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x40b34cd8" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x40b34b80" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x40b34708" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x40b117d8" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x40b11680" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x40b11e40" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
        <documentation loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x40b11ce8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Get" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Get.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Get.nc">
        <short>&#10; The Get interface is intended for synchronous reading of small&#10; values.</short>
        <long>&#10; The Get interface is intended for synchronous reading of small&#10; values. The type of the value is given as a template&#10; argument. Generally, these values are backed by memory or&#10; computation. Because no error code is included, the get() call must&#10; be guaranteed to succeed.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision$ $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40ba1f28" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Get.nc">
          <interfacedef-ref qname="Get"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40ba1f28"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40b9a3c8" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Get.nc">
        <documentation loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Get.nc">
          <short>&#10; Retrieves a value of type val_t.</short>
          <long>&#10; Retrieves a value of type val_t.&#10;&#10; @return the value itself&#10;</long>
        </documentation>
        <interfacedef-ref qname="Get"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40ba1f28"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40da13c8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40da13c8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40da1530" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da1530"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40da1a18" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40da1530"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40da0510" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
          <long>&#10; Cancel a pending overflow interrupt.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x40da0010" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40da0938" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SafeSerialSendIF" loc="1:SafeSerialSendIF.nc">
      <function command="" provided="0" name="queueMessageBuffer" ref="0x40715010" loc="25:SafeSerialSendIF.nc">
        <interfacedef-ref qname="SafeSerialSendIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sendMsg_p" ref="0x40716e40" loc="25:SafeSerialSendIF.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40716998" loc="16:SafeSerialSendIF.nc">
        <interfacedef-ref qname="SafeSerialSendIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg_p" ref="0x40716618" loc="16:SafeSerialSendIF.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="size_p" ref="0x40716818" loc="16:SafeSerialSendIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMessageBuffer" ref="0x407161e8" loc="9:SafeSerialSendIF.nc">
        <interfacedef-ref qname="SafeSerialSendIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
              <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="droppedMessageCount" ref="0x40715478" loc="32:SafeSerialSendIF.nc">
        <interfacedef-ref qname="SafeSerialSendIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
      <documentation loc="22:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x406e0a18" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x406e0e60" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x406de2f0" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x406deb60" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x406dd880" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x406ddd28" loc="106:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x406de718" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x406dc640" loc="123:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="109:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x406dc4e8" loc="123:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x406e05f0" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x406dd010" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x406dd438" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x407fa010" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x407fa3f8" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x407e17b0" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x407fabc8" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x407e1b70" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x407fa7d0" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x407e1070" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x407e1400" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BcpPacket" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
      <documentation loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <short>&#10;  ADT for BCP data frames.</short>
        <long>&#10;  ADT for BCP data frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Scott Moeller&#10;  @date   $Date: 2010/03/05 22:37:37 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSequenceNumber" ref="0x406fd170" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ffdd8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0x406fd010" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHopCount" ref="0x406f97a0" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f9648" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getBCPPktType" ref="0x406f9de8" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f9c90" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0x406ff398" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ff030" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x406ff238" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getValphaSeqNo" ref="0x406f91e0" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406f9088" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x406fde18" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fdae0" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0x406fdcb8" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0x406e4c08" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406e4ab0" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getDelay" ref="0x406fc410" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fc2b8" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getBackpressure" ref="0x406fb010" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fce58" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x406ff988" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406ff830" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getTxCount" ref="0x406fc9c8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fc870" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNodeTxCount" ref="0x4070e448" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4070e2f0" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getValphaValue" ref="0x406fbbf0" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fba98" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0x406fd6f8" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fd5a0" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNhBackpressure" ref="0x406fb610" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
        <interfacedef-ref qname="BcpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406fb4b8" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x409727f8" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409726a0" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x4096d300" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4096d1a8" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x4096dd88" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4096dc30" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GainRadioModel" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="putOnAirTo" ref="0x40a32190" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
            </type-int>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x40a355e8" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0x40a35810" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x40a359e8" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
            </type-int>
          </variable>
          <variable name="endTime" ref="0x40a35c20" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
            </type-int>
          </variable>
          <variable name="gain" ref="0x40a35dd8" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
          <variable name="reverseGain" ref="0x40a32010" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x40a55550" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a553f8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearChannel" ref="0x40a32aa8" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClearValue" ref="0x40a326a8" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x40a32550" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="acked" ref="0x40a55010" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a32e80" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0x40a55ad8" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a55980" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x40983bf0" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
        <documentation loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40983a98" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x40984010" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
        <documentation loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40987bf8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x40987e30" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x409832a0" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
        <documentation loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40983148" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x40984be8" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
        <documentation loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40984850" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x40984a88" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x40981540" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
        <documentation loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409813e8" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/PacketLink.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacketModel" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x408f3d68" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="node" ref="0x408f3808" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0x408f3a20" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x408f3c00" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x40908658" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Signal that a packet was received.</short>
          <long>&#10; Signal that a packet was received. Note that there is no buffer&#10; swap: a component using this interface must copy out the message&#10; if it needs it.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40908500" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40909698" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40909540" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40908010" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40909c88" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x40909e80" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0x40908ca0" loc="79:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40908b48" loc="79:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x40dc2be8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40dc2be8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x40dbc438" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40dbeb08" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40dbf0f8" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40dc2be8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x40dbc9c8" loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40dbc870" loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x40dbce58" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40dbfec0" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40dbfaa0" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40dbc010" loc="84:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40dbf670" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40dc2be8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40dbf518" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40dc2be8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40dbe2e8" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40dbe6e0" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
      <documentation loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x40704648" loc="166:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x4067dcc0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x407044f0" loc="166:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x4070cf18" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4070cdc0" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x406efe60" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x4070c518" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4070c3c0" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x40708818" loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x407084b0" loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x407086b8" loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x4070ab18" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4070a7b0" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4070a9b8" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x40706010" loc="136:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40709df0" loc="136:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40706b48" loc="151:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40706818" loc="151:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x407069e8" loc="151:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x40709410" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x407092b8" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x40705370" loc="176:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x4067dcc0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40705010" loc="176:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x40705210" loc="176:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x4067dcc0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x40705be8" loc="184:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x4067dcc0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
      <documentation loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x406d1a90" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x406e2010" loc="84:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40409010" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x40409918" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x40409450" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BcpRateControlIF" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControlIF.nc">
      <function command="" provided="0" name="getValphaUpper" ref="0x40b9b460" loc="2:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControlIF.nc">
        <interfacedef-ref qname="BcpRateControlIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValphaValue" ref="0x40b9bca0" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControlIF.nc">
        <interfacedef-ref qname="BcpRateControlIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSeqenceNo" ref="0x40b9b878" loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControlIF.nc">
        <interfacedef-ref qname="BcpRateControlIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x40f3d6a0" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40f3d548" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:4" alignment="I:4">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
                <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x406da930" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x406da930"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x406eb1a8" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="121:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x406ed010" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x406ec170" loc="103:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x406ede08" loc="103:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x406ec010" loc="103:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x406ed960" loc="87:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x406ebb20" loc="140:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="135:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x406eb5f0" loc="133:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="127:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x406ed4a0" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x406d8010" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x406dae30" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x406ecb58" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="105:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x406ec810" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x406ec9f8" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x406d86a8" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x406d8550" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x406d8b78" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BcpRouterForwarderIF" loc="1:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
      <function command="" provided="0" name="getLinkRate" ref="0x40be7168" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40be7010" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="setNotifyBurstyLinkNeighbor" ref="0x40bebd30" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="19:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; Notifies the forwarding engine that there exist neighbors that have good temporary links,&#10;  and that the next data packet header should include this information with the hope that&#10;  the neighbor snoops it and re-evaluates the link with the new ETX 1.0&#10;</short>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40bebbd8" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="txNoAck" ref="0x40bea3c0" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="26:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; The following are used to track link transmission&#10;  success statistics.</short>
          <long>&#10; The following are used to track link transmission&#10;  success statistics.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40bea268" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="txAck" ref="0x40bea9b8" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40bea860" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="updateNeighborBackpressure" ref="0x40be7a28" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; Updates to the backlog information arriving through&#10;  either beacons or received data packet headers.</short>
          <long>&#10; Updates to the backlog information arriving through&#10;  either beacons or received data packet headers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40be7648" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="rcvBackpressure_p" ref="0x40be78c8" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="updateRouting" ref="0x40bc4b98" loc="8:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="2:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; Determines whether a next-hop neighbor exists with&#10;  positive weight.</short>
          <long>&#10; Determines whether a next-hop neighbor exists with&#10;  positive weight.&#10;  If one does, signals SUCCESS and signals setNextHopAddress()&#10;  If not returns FAIL&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="localBackpressure_p" ref="0x40bc4a40" loc="8:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="updateNeighborSnoop" ref="0x40be6db0" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; Updates to the backlog information arriving through&#10;  snooped neighbor packet headers.</short>
          <long>&#10; Updates to the backlog information arriving through&#10;  snooped neighbor packet headers.&#10; Also passes information needed to detect burst link availability (STLE)&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="localBackpressure_p" ref="0x40be6010" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="snoopBackpressure_p" ref="0x40be62a0" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="nhBackpressure_p" ref="0x40be6528" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
          <variable name="nodeTxCount_p" ref="0x40be6770" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
          <variable name="neighbor_p" ref="0x40be69c0" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="burstNotifyAddr" ref="0x40be6c30" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="updateLinkSuccess" ref="0x40be81c8" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40beae30" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="txCount_p" ref="0x40be8068" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="updateLinkRate" ref="0x40be8a38" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; updateLinkRate submits a new packet transmit time for exponential averaging.</short>
          <long>&#10; updateLinkRate submits a new packet transmit time for exponential averaging.&#10;  statistics are kept per link.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor_p" ref="0x40be8630" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="newLinkPacketTxTime_p" ref="0x40be88d8" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="setNextHopAddress" ref="0x40beb5b8" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
        <documentation loc="10:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
          <short>&#10; Establishes the next-hop neighbor to be used&#10;  by the Forwarding Engine&#10;&#10;  Also passes on the backpresure value of that neighbor&#10; </short>
          <long>&#10; Establishes the next-hop neighbor to be used&#10;  by the Forwarding Engine&#10;&#10;  Also passes on the backpresure value of that neighbor&#10; @return active status of the forwarder.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BcpRouterForwarderIF"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="nextHopAddress_p" ref="0x40beb1b0" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
            </type-int>
          </variable>
          <variable name="nextHopBackpressure_p" ref="0x40beb458" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRouterForwarderIF.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
    <struct loc="106:/usr/include/stdlib.h" ref="0x402df5d8" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0x402df6e8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0x402df748" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="161:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8b6c0" defined="" size="I:1" alignment="I:1">
      <field name="psr321" ref="0x40d8b7d0" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="psr0" ref="0x40d8b830" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="pud" ref="0x40d8b890" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="acme" ref="0x40d8b8f0" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x40d8b950" bit-offset="I:4" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="tsm" ref="0x40d8b9b0" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="bnd" loc="9:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401b9010" defined="" size="I:8" alignment="I:4">
      <field name="lo" ref="0x401b9270" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="hi" ref="0x401b92d0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </attribute>
    <enum loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d6b218" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d93660" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d93770" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d937d0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d931f0"/></type-tag>
      </field>
    </union>
    <struct name="itimerspec" loc="161:/usr/include/time.h" ref="0x405e3c20" defined="" size="I:16" alignment="I:4">
      <field name="it_interval" ref="0x405f3070" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x403004e8"/></type-tag>
      </field>
      <field name="it_value" ref="0x405f30d0" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timespec" ref="0x403004e8"/></type-tag>
      </field>
    </struct>
    <struct loc="144:/usr/include/bits/types.h" ref="0x402ef3a0" defined="" size="I:8" alignment="I:4">
      <field name="__val" ref="0x402ef4b0" bit-offset="I:0" size="I:8">
        <type-array elements="I:2" size="I:8" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </type-array>
      </field>
    </struct>
    <nx_struct name="tossim_metadata" loc="19:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x4068de20" defined="" size="I:6" alignment="I:1">
      <field name="strength" ref="0x4068c668" bit-offset="I:0" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
          <typename><typedef-ref name="nx_int8_t" ref="0x402a55a0"/></typename>
        </type-int>
      </field>
      <field name="lqi" ref="0x4068c6c8" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0x4068c728" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="time" ref="0x4068c788" bit-offset="I:24" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="destroyable" ref="0x4068c7e8" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="176:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8bed8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="gain_entry" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.h" ref="0x405aa6c0" defined="" size="I:16" alignment="I:4">
      <field name="mote" ref="0x405aab88" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="gain" ref="0x405aabe8" bit-offset="I:32" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="next" ref="0x405aac48" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x405aa6c0"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <struct loc="225:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d85208" defined="" size="I:1" alignment="I:1">
      <field name="cs" ref="0x40d85318" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="wgm32" ref="0x40d85378" bit-offset="I:3" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x40d853d8" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ices1" ref="0x40d85438" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="icnc1" ref="0x40d85498" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="117:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407e0810" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_gain_noise" loc="3:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c" ref="0x405a49a8" defined="" size="I:16" alignment="I:4">
      <field name="mean" ref="0x405a4d18" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="range" ref="0x405a4d78" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <attribute name="deputy_scope"  loc="NONE" ref="0x4002ec28" size="V:" alignment="V:">
    </attribute>
    <struct name="timeval" loc="75:/usr/include/bits/time.h" ref="0x40300a30" defined="" size="I:8" alignment="I:4">
      <field name="tv_sec" ref="0x40300df8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__time_t" ref="0x402f4130"/></typename>
        </type-int>
      </field>
      <field name="tv_usec" ref="0x40300e58" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__suseconds_t" ref="0x402f4608"/></typename>
        </type-int>
      </field>
    </struct>
    <enum name="ieee154_fcf_type_enums" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h" ref="0x409c77d0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="12:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x4095ae98" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="117:/usr/include/bits/pthreadtypes.h" ref="0x4030ac30" defined="" size="I:44" alignment="I:4">
      <field name="__lock" ref="0x4030ad40" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__futex" ref="0x4030ada0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__total_seq" ref="0x4030ae00" bit-offset="I:64" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__wakeup_seq" ref="0x4030ae60" bit-offset="I:128" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__woken_seq" ref="0x4030aec0" bit-offset="I:192" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__mutex" ref="0x4030af20" bit-offset="I:256" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__nwaiters" ref="0x4030af80" bit-offset="I:288" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__broadcast_seq" ref="0x4030f010" bit-offset="I:320" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <attribute name="nonnull" loc="8:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401b6b18" defined="" size="I:0" alignment="I:1">
    </attribute>
    <nx_struct loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40bac8a8" defined="" size="I:23" alignment="I:1">
      <field name="bcpDelay" ref="0x40bac9b8" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="bcpBackpressure" ref="0x40baca18" bit-offset="I:32" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="nhBackpressure" ref="0x40baca78" bit-offset="I:48" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="txCount" ref="0x40bacad8" bit-offset="I:64" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="hdrChecksum" ref="0x40bacb38" bit-offset="I:80" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="origin" ref="0x40bacb98" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
        </type-int>
      </field>
      <field name="hopCount" ref="0x40bacbf8" bit-offset="I:112" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="originSeqNo" ref="0x40bacc58" bit-offset="I:120" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="pktType" ref="0x40baccb8" bit-offset="I:128" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="nodeTxCount" ref="0x40bacd18" bit-offset="I:136" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="burstNotifyAddr" ref="0x40bacd78" bit-offset="I:144" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
        </type-int>
      </field>
      <field name="valphaValue" ref="0x40bacdd8" bit-offset="I:160" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="valphaSeqNo" ref="0x40bace38" bit-offset="I:168" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="valphaUpper" ref="0x40bacf18" bit-offset="I:176" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <attribute name="number"  loc="NONE" ref="0x4002ccf0" size="V:" alignment="V:">
    </attribute>
    <struct loc="144:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8d2f8" defined="" size="I:1" alignment="I:1">
      <field name="tov0" ref="0x40d8d408" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf0" ref="0x40d8d468" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="tov1" ref="0x40d8d4c8" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf1b" ref="0x40d8d528" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf1a" ref="0x40d8d588" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="icf1" ref="0x40d8d5e8" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="tov2" ref="0x40d8d648" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf2" ref="0x40d8d6a8" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <nx_struct name="TimeSyncMsg" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h" ref="0x406c2d08" defined="" size="I:13" alignment="I:1">
      <field name="rootID" ref="0x406d55a0" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="nodeID" ref="0x406d5600" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="seqNum" ref="0x406d5660" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="globalTime" ref="0x406d56c0" bit-offset="I:40" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="localTime" ref="0x406d5720" bit-offset="I:72" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40ba7a08" defined="" size="I:12" alignment="I:2">
      <field name="backpressure" ref="0x40ba7b18" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="linkPacketTxTime" ref="0x40ba7b78" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="linkETX" ref="0x40ba7bd8" bit-offset="I:32" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="lastTxNoStreakID" ref="0x40ba7c38" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="txNoStreakCount" ref="0x40ba7c98" bit-offset="I:56" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="neighbor" ref="0x40ba7cf8" bit-offset="I:64" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
        </type-int>
      </field>
      <field name="isBurstyNow" ref="0x40ba7d58" bit-offset="I:80" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x4068ccf0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="27:/usr/include/_G_config.h" ref="0x4045c8a0" defined="" size="I:16" alignment="I:4">
      <field name="__pos" ref="0x4045c9b0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off64_t" ref="0x402f1e28"/></typename>
        </type-int>
      </field>
      <field name="__state" ref="0x4045ca10" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x4045dad8"/>
          <typename><typedef-ref name="__mbstate_t" ref="0x4045dd00"/></typename>
        </type-tag>
      </field>
    </struct>
    <struct name="node" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/heap.c" ref="0x4051d4f8" defined="" size="I:12" alignment="I:4">
      <field name="data" ref="0x4051d848" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="key" ref="0x4051d8a8" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct loc="141:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407debc0" defined="" size="I:1" alignment="I:1">
      <field name="adps" ref="0x407decd0" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="adie" ref="0x407ded30" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="adif" ref="0x407ded90" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="adfr" ref="0x407dedf0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="adsc" ref="0x407dee50" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="aden" ref="0x407deeb0" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <enum name="iee154_fcf_addr_mode_enums" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h" ref="0x409c63f8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="26:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h" ref="0x4067b3e8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="serial_packet" loc="120:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x40686250" defined="" size="I:7" alignment="I:1">
      <field name="header" ref="0x406866d8" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x406885d0"/>
          <typename><typedef-ref name="serial_header_t" ref="0x40686048"/></typename>
        </type-tag>
      </field>
      <field name="data" ref="0x40686738" bit-offset="I:56" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <enum loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40b883f0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="14:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h" ref="0x4067b078" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="integer"  loc="NONE" ref="0x4002cb88" size="V:" alignment="V:">
    </attribute>
    <union loc="68:/usr/include/stdlib.h" ref="0x402dc8c0" defined="" size="I:4" alignment="I:4">
      <field name="__uptr" ref="0x402dc9d0" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:4" alignment="I:4"><union-ref name="wait" ref="0x402d9f08"/></type-tag>
        </type-pointer>
      </field>
      <field name="__iptr" ref="0x402dca30" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </type-pointer>
      </field>
    </union>
    <attribute name="exactlyonce" loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x404ca140" defined="" size="I:0" alignment="I:1">
    </attribute>
    <union name="message_footer" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x40685840" defined="" size="I:2" alignment="I:1">
      <field name="tossim" ref="0x40685b80" bit-offset="I:0" size="I:2">
        <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x4068d850"/>
          <typename><typedef-ref name="tossim_footer_t" ref="0x4068dc08"/></typename>
        </type-tag>
      </field>
    </union>
    <enum loc="48:/usr/include/ctype.h" ref="0x4043d0d0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="91:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x4068a210" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="combine"  loc="NONE" ref="0x4002e890" size="V:" alignment="V:">
      <field name="fn" ref="0x4002e9a0" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <struct loc="85:/usr/include/bits/waitstatus.h" ref="0x402dc0d0" defined="" size="I:4" alignment="I:4">
      <field name="__w_stopval" ref="0x402dc1e0" bit-offset="I:0" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_stopsig" ref="0x402dc240" bit-offset="I:8" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="drand48_data" loc="418:/usr/include/stdlib.h" ref="0x40320d08" defined="" size="I:24" alignment="I:4">
      <field name="__x" ref="0x4031f4d8" bit-offset="I:0" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="__old_x" ref="0x4031f538" bit-offset="I:48" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="__c" ref="0x4031f598" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__init" ref="0x4031f5f8" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__a" ref="0x4031f658" bit-offset="I:128" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct name="__locale_struct" loc="28:/usr/include/xlocale.h" ref="0x402bbef8" defined="" size="I:116" alignment="I:4">
      <field name="__locales" ref="0x402baae0" bit-offset="I:0" size="I:52">
        <type-array elements="I:13" size="I:52" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="V:" alignment="V:"><struct-ref name="__locale_data" ref="0x402ba0e8"/></type-tag>
          </type-pointer>
        </type-array>
      </field>
      <field name="__ctype_b" ref="0x402bab40" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__ctype_tolower" ref="0x402baba0" bit-offset="I:448" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__ctype_toupper" ref="0x402bac00" bit-offset="I:480" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__names" ref="0x402bac60" bit-offset="I:512" size="I:52">
        <type-array elements="I:13" size="I:52" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-qualified const="">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </type-pointer>
        </type-array>
      </field>
    </struct>
    <union name="message_metadata" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x40685e60" defined="" size="I:6" alignment="I:1">
      <field name="tossim" ref="0x406841f8" bit-offset="I:0" size="I:6">
        <type-tag size="I:6" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x4068de20"/>
          <typename><typedef-ref name="tossim_metadata_t" ref="0x4068c8a0"/></typename>
        </type-tag>
      </field>
    </union>
    <enum loc="673:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h" ref="0x40779800" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="serial_header" loc="112:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x406885d0" defined="" size="I:7" alignment="I:1">
      <field name="dest" ref="0x40688df8" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x40688e58" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0x40688eb8" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0x40688f18" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0x4067d598"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x40688f78" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0x4067d200"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="120:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h" ref="0x407cf720" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="lqi_dist" loc="4:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h" ref="0x409bee78" defined="" size="I:12" alignment="I:4">
      <field name="lqi" ref="0x409e71d8" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="cdf" ref="0x409e7238" bit-offset="I:32" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <union name="message_header" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x40685060" defined="" size="I:8" alignment="I:1">
      <field name="tossim" ref="0x40685518" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x4067ba10"/>
          <typename><typedef-ref name="tossim_header_t" ref="0x4068d648"/></typename>
        </type-tag>
      </field>
      <field name="serial" ref="0x40685578" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x406885d0"/>
          <typename><typedef-ref name="serial_header_t" ref="0x40686048"/></typename>
        </type-tag>
      </field>
    </union>
    <enum loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407c8cd8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="timespec" loc="120:/usr/include/time.h" ref="0x403004e8" defined="" size="I:8" alignment="I:4">
      <field name="tv_sec" ref="0x40300848" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__time_t" ref="0x402f4130"/></typename>
        </type-int>
      </field>
      <field name="tv_nsec" ref="0x403008a8" bit-offset="I:32" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <attribute name="count" loc="11:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401b9ca0" defined="" size="I:4" alignment="I:4">
      <field name="n" ref="0x401b9e50" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct loc="29:/usr/include/bits/sigset.h" ref="0x402fbe58" defined="" size="I:128" alignment="I:4">
      <field name="__val" ref="0x402fbf68" bit-offset="I:0" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
        </type-array>
      </field>
    </struct>
    <enum loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40ba9790" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x40557e68" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d95e88" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="bnd_nok" loc="10:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401b9660" defined="" size="I:8" alignment="I:4">
      <field name="lo" ref="0x401b98c0" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="hi" ref="0x401b9920" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </attribute>
    <union loc="158:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8bb50" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d8bc60" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d8bcc0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d8b6c0"/></type-tag>
      </field>
    </union>
    <struct name="timezone" loc="57:/usr/include/sys/time.h" ref="0x40550458" defined="" size="I:8" alignment="I:4">
      <field name="tz_minuteswest" ref="0x405507b0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tz_dsttime" ref="0x40550810" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d931f0" defined="" size="I:1" alignment="I:1">
      <field name="cs" ref="0x40d93300" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="wgm1" ref="0x40d93360" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="com" ref="0x40d933c0" bit-offset="I:4" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="wgm0" ref="0x40d93420" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="foc" ref="0x40d93480" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <union name="wait" loc="67:/usr/include/bits/waitstatus.h" ref="0x402d9f08" defined="" size="I:4" alignment="I:4">
      <field name="w_status" ref="0x402dc3e8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__wait_terminated" ref="0x402dc448" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x402d7808"/></type-tag>
      </field>
      <field name="__wait_stopped" ref="0x402dc4a8" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x402dc0d0"/></type-tag>
      </field>
    </union>
    <struct loc="170:/usr/include/bits/pthreadtypes.h" ref="0x403121a8" defined="" size="I:32" alignment="I:4">
      <field name="__lock" ref="0x403122b8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_readers" ref="0x40312318" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__readers_wakeup" ref="0x40312378" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__writer_wakeup" ref="0x403123d8" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_readers_queued" ref="0x40312438" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_writers_queued" ref="0x40312498" bit-offset="I:160" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__flags" ref="0x403124f8" bit-offset="I:192" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__shared" ref="0x40312558" bit-offset="I:200" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__pad1" ref="0x403125b8" bit-offset="I:208" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__pad2" ref="0x40312618" bit-offset="I:216" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="__writer" ref="0x40312678" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407cd190" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8e130" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d8e240" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d8e2a0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d8fbc0"/></type-tag>
      </field>
    </union>
    <struct name="sim_event" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h" ref="0x404c1e70" defined="" size="I:28" alignment="I:4">
      <field name="time" ref="0x404be1f0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
        </type-int>
      </field>
      <field name="mote" ref="0x404be250" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="force" ref="0x404be2b0" bit-offset="I:96" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
      <field name="cancelled" ref="0x404be310" bit-offset="I:104" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
      <field name="data" ref="0x404be370" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="handle" ref="0x404be3d0" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
                  <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="cleanup" ref="0x404be440" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:4" alignment="I:4">
                <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
                  <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
    </struct>
    <struct name="_IO_jump_t" ref="0x4045bda0" size="V:" alignment="V:">
    </struct>
    <struct loc="306:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40dace08" defined="" size="I:1" alignment="I:1">
      <field name="ocf1c" ref="0x40dacf18" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf3c" ref="0x40dacf78" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="tov3" ref="0x40dab010" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf3b" ref="0x40dab070" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocf3a" ref="0x40dab0d0" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="icf3" ref="0x40dab130" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x40dab190" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <nx_struct name="tossim_footer" loc="15:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x4068d850" defined="" size="I:2" alignment="I:1">
      <field name="crc" ref="0x4068db50" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
          <typename><typedef-ref name="nxle_uint16_t" ref="0x402aa018"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum name="__codecvt_result" loc="206:/usr/include/libio.h" ref="0x404599c8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_packet" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_packet.h" ref="0x40673f08" defined="" size="I:0" alignment="I:1">
    </struct>
    <enum loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/Collection.h" ref="0x40ba35c8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="184:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d89668" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d89778" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d897d8" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d89230"/></type-tag>
      </field>
    </union>
    <struct loc="244:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d83938" defined="" size="I:1" alignment="I:1">
      <field name="rsvd" ref="0x40d83a48" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="focC" ref="0x40d83aa8" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="focB" ref="0x40d83b08" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="focA" ref="0x40d83b68" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="86:/usr/include/wchar.h" ref="0x4045d7e8" defined="" size="I:4" alignment="I:4">
      <field name="__wch" ref="0x4045d8f8" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__wchb" ref="0x4045d958" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </union>
    <union loc="53:/usr/include/bits/pthreadtypes.h" ref="0x40309888" defined="" size="I:36" alignment="I:4">
      <field name="__size" ref="0x40309998" bit-offset="I:0" size="I:36">
        <type-array elements="I:36" size="I:36" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x403099f8" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct loc="118:/usr/include/stdlib.h" ref="0x402dfc08" defined="" size="I:16" alignment="I:4">
      <field name="quot" ref="0x402dfd18" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0x402dfd78" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct name="__pthread_internal_slist" loc="67:/usr/include/bits/pthreadtypes.h" ref="0x40309d38" defined="" size="I:4" alignment="I:4">
      <field name="__next" ref="0x40307160" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x40309d38"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <union loc="212:/usr/include/bits/pthreadtypes.h" ref="0x403154c8" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0x403155d8" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x40315638" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <nx_struct name="serial_metadata" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x40686a80" defined="" size="I:1" alignment="I:1">
      <field name="ack" ref="0x40686d78" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum name="__itimer_which" loc="93:/usr/include/sys/time.h" ref="0x4054db60" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atmostonce" loc="89:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x404cbcf8" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="123:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407e0e80" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="303:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40dab330" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40dab440" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40dab4a0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40dace08"/></type-tag>
      </field>
    </union>
    <union loc="76:/usr/include/bits/pthreadtypes.h" ref="0x4030b678" defined="" size="I:24" alignment="I:4">
      <field name="__data" ref="0x4030b788" bit-offset="I:0" size="I:24">
        <type-tag size="I:24" alignment="I:4"><struct-ref name="__pthread_mutex_s" ref="0x40307488"/></type-tag>
      </field>
      <field name="__size" ref="0x4030b7e8" bit-offset="I:0" size="I:24">
        <type-array elements="I:24" size="I:24" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x4030b848" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <attribute name="hwevent"  loc="NONE" ref="0x4002e448" size="V:" alignment="V:">
    </attribute>
    <struct loc="83:/usr/include/wchar.h" ref="0x4045dad8" defined="" size="I:8" alignment="I:4">
      <field name="__count" ref="0x4045dbe8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__value" ref="0x4045dc48" bit-offset="I:32" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref ref="0x4045d7e8"/></type-tag>
      </field>
    </struct>
    <struct name="_IO_FILE" loc="271:/usr/include/libio.h" ref="0x40454bb8" defined="" size="I:148" alignment="I:4">
      <field name="_flags" ref="0x40461ca0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_IO_read_ptr" ref="0x40461d00" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_read_end" ref="0x40461d60" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_read_base" ref="0x40461dc0" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_base" ref="0x40461e20" bit-offset="I:128" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_ptr" ref="0x40461e80" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_end" ref="0x40461ee0" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_buf_base" ref="0x40461f40" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_buf_end" ref="0x40461fa0" bit-offset="I:256" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_save_base" ref="0x40460018" bit-offset="I:288" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_backup_base" ref="0x40460078" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_save_end" ref="0x404600d8" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_markers" ref="0x40460138" bit-offset="I:384" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:12" alignment="I:4"><struct-ref name="_IO_marker" ref="0x40459240"/></type-tag>
        </type-pointer>
      </field>
      <field name="_chain" ref="0x40460218" bit-offset="I:416" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/></type-tag>
        </type-pointer>
      </field>
      <field name="_fileno" ref="0x40460278" bit-offset="I:448" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_flags2" ref="0x404602d8" bit-offset="I:480" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_old_offset" ref="0x40460338" bit-offset="I:512" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__off_t" ref="0x402f1ba8"/></typename>
        </type-int>
      </field>
      <field name="_cur_column" ref="0x40460398" bit-offset="I:544" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_vtable_offset" ref="0x404603f8" bit-offset="I:560" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="_shortbuf" ref="0x40460458" bit-offset="I:568" size="I:1">
        <type-array elements="I:1" size="I:1" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_lock" ref="0x404604b8" bit-offset="I:576" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1">
            <typename><typedef-ref name="_IO_lock_t" ref="0x40459068"/></typename>
          </type-void>
        </type-pointer>
      </field>
      <field name="_offset" ref="0x40460518" bit-offset="I:608" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off64_t" ref="0x402f1e28"/></typename>
        </type-int>
      </field>
      <field name="__pad1" ref="0x40460578" bit-offset="I:672" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad2" ref="0x404605d8" bit-offset="I:704" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad3" ref="0x40460638" bit-offset="I:736" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad4" ref="0x40460798" bit-offset="I:768" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad5" ref="0x404607f8" bit-offset="I:800" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="size_t" ref="0x401b6498"/></typename>
        </type-int>
      </field>
      <field name="_mode" ref="0x40460858" bit-offset="I:832" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_unused2" ref="0x404608b8" bit-offset="I:864" size="I:40">
        <type-array elements="I:40" size="I:40" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </struct>
    <struct loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x406da2c0" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x406da3d0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="hashtable" ref="0x404ca440" size="V:" alignment="V:">
    </struct>
    <enum loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407ce6a8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="heap" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/heap.h" ref="0x40515dd0" defined="" size="I:12" alignment="I:4">
      <field name="size" ref="0x40513240" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="data" ref="0x405132a0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="private_size" ref="0x40513300" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <attribute name="safe"  loc="NONE" ref="0x4002ed90" size="V:" alignment="V:">
    </attribute>
    <nx_struct loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40baa810" defined="" size="I:4" alignment="I:1">
      <field name="bcpBackpressure" ref="0x40baa920" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="valphaUpper" ref="0x40baa980" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="valphaSeqNo" ref="0x40baa9e0" bit-offset="I:24" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct loc="22:/usr/include/_G_config.h" ref="0x4045c1f8" defined="" size="I:12" alignment="I:4">
      <field name="__pos" ref="0x4045c308" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__off_t" ref="0x402f1ba8"/></typename>
        </type-int>
      </field>
      <field name="__state" ref="0x4045c368" bit-offset="I:32" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x4045dad8"/>
          <typename><typedef-ref name="__mbstate_t" ref="0x4045dd00"/></typename>
        </type-tag>
      </field>
    </struct>
    <struct name="_IO_marker" loc="186:/usr/include/libio.h" ref="0x40459240" defined="" size="I:12" alignment="I:4">
      <field name="_next" ref="0x40459760" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:12" alignment="I:4"><struct-ref name="_IO_marker" ref="0x40459240"/></type-tag>
        </type-pointer>
      </field>
      <field name="_sbuf" ref="0x404597c0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/></type-tag>
        </type-pointer>
      </field>
      <field name="_pos" ref="0x40459820" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union loc="111:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d909c0" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d90ad0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d90b30" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d905a0"/></type-tag>
      </field>
    </union>
    <enum loc="4:BcpCollectionExample.h" ref="0x406b3b58" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="random_data" loc="349:/usr/include/stdlib.h" ref="0x403136d0" defined="" size="I:28" alignment="I:4">
      <field name="fptr" ref="0x40318010" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x401be938"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="rptr" ref="0x40318070" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x401be938"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="state" ref="0x403180d0" bit-offset="I:64" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x401be938"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="rand_type" ref="0x40318130" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rand_deg" ref="0x40318190" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rand_sep" ref="0x403181f0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="end_ptr" ref="0x40318250" bit-offset="I:192" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x401be938"/></typename>
          </type-int>
        </type-pointer>
      </field>
    </struct>
    <enum loc="202:/usr/include/math.h" ref="0x40435870" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="141:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8d840" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d8d950" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d8d9b0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d8d2f8"/></type-tag>
      </field>
    </union>
    <enum loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x4068b2f8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="tm" loc="133:/usr/include/time.h" ref="0x405e5b28" defined="" size="I:44" alignment="I:4">
      <field name="tm_sec" ref="0x405e36d8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_min" ref="0x405e3738" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_hour" ref="0x405e3798" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mday" ref="0x405e37f8" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mon" ref="0x405e3858" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_year" ref="0x405e38b8" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_wday" ref="0x405e3918" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_yday" ref="0x405e3978" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_isdst" ref="0x405e39d8" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_gmtoff" ref="0x405e3a38" bit-offset="I:288" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_zone" ref="0x405e3a98" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
    </struct>
    <struct name="sim_log_output" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x404de040" defined="" size="I:8" alignment="I:4">
      <field name="num" ref="0x404de410" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="files" ref="0x404de470" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/>
              <typename><typedef-ref name="FILE" ref="0x40454df8"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <struct ref="0x40026f48" size="V:" alignment="V:">
    </struct>
    <union loc="206:/usr/include/bits/pthreadtypes.h" ref="0x40311da0" defined="" size="I:20" alignment="I:4">
      <field name="__size" ref="0x40311eb0" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x40311f10" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <enum loc="295:/usr/include/math.h" ref="0x404402b0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407cd798" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="radio_stats" loc="98:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x4068adb0" defined="" size="I:18" alignment="I:2">
      <field name="version" ref="0x40689f18" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="flags" ref="0x40689f78" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="reserved" ref="0x40688010" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="platform" ref="0x40688070" bit-offset="I:24" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="MTU" ref="0x406880d0" bit-offset="I:32" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="radio_crc_fail" ref="0x40688130" bit-offset="I:48" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="radio_queue_drops" ref="0x40688190" bit-offset="I:64" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="serial_crc_fail" ref="0x406881f0" bit-offset="I:80" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="serial_tx_fail" ref="0x40688250" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="serial_short_packets" ref="0x406882b0" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
      <field name="serial_proto_drops" ref="0x40688310" bit-offset="I:128" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="one_nok" loc="14:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bab80" defined="" size="I:0" alignment="I:1">
    </attribute>
    <attribute name="dmemset" loc="15:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bc010" defined="" size="I:12" alignment="I:4">
      <field name="a1" ref="0x401bc298" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a2" ref="0x401bc2f8" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a3" ref="0x401bc358" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <enum loc="111:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407e0260" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atleastonce" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x404cbef8" defined="" size="I:0" alignment="I:1">
    </attribute>
    <struct loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x406d0a28" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x406d0b38" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="127:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d8fbc0" defined="" size="I:1" alignment="I:1">
      <field name="toie0" ref="0x40d8fcd0" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie0" ref="0x40d8fd30" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="toie1" ref="0x40d8fd90" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie1b" ref="0x40d8fdf0" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie1a" ref="0x40d8fe50" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ticie1" ref="0x40d8feb0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="toie2" ref="0x40d8ff10" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie2" ref="0x40d8ff70" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="itimerval" loc="109:/usr/include/sys/time.h" ref="0x4054c410" defined="" size="I:16" alignment="I:4">
      <field name="it_interval" ref="0x4054c848" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0x40300a30"/></type-tag>
      </field>
      <field name="it_value" ref="0x4054c8a8" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="timeval" ref="0x40300a30"/></type-tag>
      </field>
    </struct>
    <struct loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x406d0e68" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x406d0f78" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="140:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40ba5690" defined="" size="I:6" alignment="I:2">
      <field name="neighbor" ref="0x40ba57a0" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
        </type-int>
      </field>
      <field name="origin" ref="0x40ba5800" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
        </type-int>
      </field>
      <field name="originSeqNo" ref="0x40ba5860" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="hopCount" ref="0x40ba58c0" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="count_nok" loc="12:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401ba228" defined="" size="I:4" alignment="I:4">
      <field name="n" ref="0x401ba3d8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct loc="98:/usr/include/stdlib.h" ref="0x402df010" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0x402df120" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0x402df180" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="sigevent" ref="0x405f3218" size="V:" alignment="V:">
    </struct>
    <enum loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h" ref="0x406e29f8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="one" loc="13:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401ba740" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x404d2bc8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d97748" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d96d38" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="202:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d88088" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="291:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40dad878" defined="" size="I:1" alignment="I:1">
      <field name="ocie1c" ref="0x40dad988" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie3c" ref="0x40dad9e8" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="toie3" ref="0x40dada48" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie3b" ref="0x40dadaa8" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocie3a" ref="0x40dadb08" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ticie3" ref="0x40dadb68" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x40dadbc8" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="__locale_data" ref="0x402ba0e8" size="V:" alignment="V:">
    </struct>
    <attribute name="spontaneous"  loc="NONE" ref="0x4002e728" size="V:" alignment="V:">
    </attribute>
    <nx_struct name="UartPacket" loc="17:BcpCollectionExample.h" ref="0x406b2238" defined="" size="I:25" alignment="I:1">
      <field name="time" ref="0x406c20e8" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="field1" ref="0x406c2148" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="field2" ref="0x406c21a8" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="field3" ref="0x406c2208" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="field4" ref="0x406c2268" bit-offset="I:128" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="field5" ref="0x406c22c8" bit-offset="I:144" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="field6" ref="0x406c2328" bit-offset="I:160" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
        </type-int>
      </field>
      <field name="field7" ref="0x406c2388" bit-offset="I:176" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="field8" ref="0x406c23e8" bit-offset="I:184" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x406c2448" bit-offset="I:192" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x404dd078" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="snr_lqi" loc="9:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h" ref="0x409e7578" defined="" size="I:16" alignment="I:4">
      <field name="snr" ref="0x409e7a28" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="numLqi" ref="0x409e7a88" bit-offset="I:64" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="lqi" ref="0x409e7ae8" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
            <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <union loc="191:/usr/include/bits/pthreadtypes.h" ref="0x40311228" defined="" size="I:8" alignment="I:4">
      <field name="__size" ref="0x40311538" bit-offset="I:0" size="I:8">
        <type-array elements="I:8" size="I:8" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x40311598" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <enum loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40b86af0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h" ref="0x406d5918" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40ba9358" defined="" size="I:10" alignment="I:1">
      <field name="bcpTransferDelay" ref="0x40ba9468" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="bcpBackpressure" ref="0x40ba94c8" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
      <field name="delaySeqNo" ref="0x40ba9528" bit-offset="I:64" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="avgHopCount" ref="0x40ba9588" bit-offset="I:72" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <attribute name="unsafe"  loc="NONE" ref="0x4002eef8" size="V:" alignment="V:">
    </attribute>
    <struct loc="67:/usr/include/sys/select.h" ref="0x402ffa30" defined="" size="I:128" alignment="I:4">
      <field name="__fds_bits" ref="0x402ffb40" bit-offset="I:0" size="I:128">
        <type-array elements="I:32" size="I:128" alignment="I:4">
          <type-int cname="long" size="I:4" alignment="I:4">
            <typename><typedef-ref name="__fd_mask" ref="0x402ff310"/></typename>
          </type-int>
        </type-array>
      </field>
    </struct>
    <union loc="95:/usr/include/bits/pthreadtypes.h" ref="0x40307cd8" defined="" size="I:4" alignment="I:4">
      <field name="__spins" ref="0x40307de8" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__list" ref="0x40307e48" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x40309d38"/>
          <typename><typedef-ref name="__pthread_slist_t" ref="0x40307218"/></typename>
        </type-tag>
      </field>
    </union>
    <struct loc="70:/usr/include/bits/waitstatus.h" ref="0x402d7808" defined="" size="I:4" alignment="I:4">
      <field name="__w_termsig" ref="0x402d7918" bit-offset="I:0" bit-size="I:7">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_coredump" ref="0x402d7978" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_retcode" ref="0x402d79d8" bit-offset="I:8" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h" ref="0x401b82d8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="nts" loc="17:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bcd98" defined="" size="I:0" alignment="I:1">
    </attribute>
    <struct name="_IO_FILE_plus" ref="0x40460ca8" size="V:" alignment="V:">
    </struct>
    <struct name="exception" loc="320:/usr/include/math.h" ref="0x4043f1f0" defined="" size="I:32" alignment="I:4">
      <field name="type" ref="0x4043f750" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="name" ref="0x4043f7b0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="arg1" ref="0x4043f810" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="arg2" ref="0x4043f870" bit-offset="I:128" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="retval" ref="0x4043f8d0" bit-offset="I:192" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <struct name="sim_log_channel" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x404de740" defined="" size="I:16" alignment="I:4">
      <field name="name" ref="0x404ded50" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="numOutputs" ref="0x404dedb0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0x404dee10" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="outputs" ref="0x404dee70" bit-offset="I:96" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/>
              <typename><typedef-ref name="FILE" ref="0x40454df8"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <enum loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h" ref="0x406d6f18" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="73:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d954e8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="C"  loc="NONE" ref="0x4002e2e0" size="V:" alignment="V:">
    </attribute>
    <struct name="sim_noise_hash_t" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x40554e28" defined="" size="I:480" alignment="I:4">
      <field name="key" ref="0x405637a8" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="numElements" ref="0x40563808" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0x40563868" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="elements" ref="0x405638c8" bit-offset="I:224" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="flag" ref="0x40563928" bit-offset="I:256" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="dist" ref="0x40563988" bit-offset="I:288" size="I:444">
        <type-array elements="I:111" size="I:444" alignment="I:4">
          <type-float cname="float" size="I:4" alignment="I:4"></type-float>
        </type-array>
      </field>
    </struct>
    <attribute name="macro"  loc="NONE" ref="0x4002ea58" size="V:" alignment="V:">
      <field name="macro_name" ref="0x4002eb68" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <struct loc="187:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d89230" defined="" size="I:1" alignment="I:1">
      <field name="wgm10" ref="0x40d89340" bit-offset="I:0" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="comC" ref="0x40d893a0" bit-offset="I:2" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="comB" ref="0x40d89400" bit-offset="I:4" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="comA" ref="0x40d89460" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="150:/usr/include/bits/pthreadtypes.h" ref="0x40312ab0" defined="" size="I:32" alignment="I:4">
      <field name="__data" ref="0x40312bc0" bit-offset="I:0" size="I:32">
        <type-tag size="I:32" alignment="I:4"><struct-ref ref="0x403121a8"/></type-tag>
      </field>
      <field name="__size" ref="0x40312c20" bit-offset="I:0" size="I:32">
        <type-array elements="I:32" size="I:32" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x40312c80" bit-offset="I:0" size="I:4">
        <type-int cname="long" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <union loc="132:/usr/include/bits/pthreadtypes.h" ref="0x4030fb90" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0x4030fca0" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x4030fd00" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct loc="111:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h" ref="0x40ba8998" defined="" size="I:28" alignment="I:4">
      <field name="bcpArrivalDelay" ref="0x40ba8aa8" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="arrivalTime" ref="0x40ba8b08" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="firstTxTime" ref="0x40ba8b68" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="lastTxTime" ref="0x40ba8bc8" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="source" ref="0x40ba8c28" bit-offset="I:128" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="msg" ref="0x40ba8c88" bit-offset="I:160" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="txCount" ref="0x40ba8ce8" bit-offset="I:192" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d905a0" defined="" size="I:1" alignment="I:1">
      <field name="tcr0ub" ref="0x40d906b0" bit-offset="I:0" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="ocr0ub" ref="0x40d90710" bit-offset="I:1" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="tcn0ub" ref="0x40d90770" bit-offset="I:2" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="as0" ref="0x40d907d0" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="rsvd" ref="0x40d90830" bit-offset="I:4" bit-size="I:4">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <nx_struct name="message_t" loc="14:/home/xinchaol/local/src/tinyos-2.x/tos/types/message.h" ref="0x40684490" defined="" size="I:44" alignment="I:1">
      <field name="header" ref="0x40696070" bit-offset="I:0" size="I:8">
        <type-array elements="I:8" size="I:8" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="data" ref="0x406960d0" bit-offset="I:64" size="I:28">
        <type-array elements="I:28" size="I:28" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="footer" ref="0x40696130" bit-offset="I:288" size="I:2">
        <type-array elements="I:2" size="I:2" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="metadata" ref="0x40696190" bit-offset="I:304" size="I:6">
        <type-array elements="I:6" size="I:6" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <nx_struct name="tossim_header" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x4067ba10" defined="" size="I:8" alignment="I:1">
      <field name="dest" ref="0x4068d3b0" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x4068d410" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0x4068d470" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="dsn" ref="0x4068d4d0" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0x4068d530" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0x4067d598"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x4068d590" bit-offset="I:56" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0x4067d200"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="135:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407dfb50" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="222:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d856a0" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d857b0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d85810" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d85208"/></type-tag>
      </field>
    </union>
    <union loc="241:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40d83d58" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40d83e68" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40d83ec8" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40d83938"/></type-tag>
      </field>
    </union>
    <enum name="ieee154_fcf_enums" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h" ref="0x40982410" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_noise_node_t" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x40563d28" defined="" size="I:184" alignment="I:4">
      <field name="key" ref="0x40562d68" bit-offset="I:0" size="I:64">
        <type-array elements="I:16" size="I:64" alignment="I:4">
          <type-pointer size="I:4" alignment="I:4">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </type-array>
      </field>
      <field name="freqKey" ref="0x40562dc8" bit-offset="I:512" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="lastNoiseVal" ref="0x40562e28" bit-offset="I:672" size="I:16">
        <type-array elements="I:16" size="I:16" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="noiseGenTime" ref="0x40562e88" bit-offset="I:800" size="I:64">
        <type-array elements="I:16" size="I:64" alignment="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="noiseTable" ref="0x40562ee8" bit-offset="I:1312" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x404ca440"/></type-tag>
        </type-pointer>
      </field>
      <field name="noiseTrace" ref="0x40562f48" bit-offset="I:1344" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="noiseTraceLen" ref="0x40561010" bit-offset="I:1376" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="noiseTraceIndex" ref="0x40561070" bit-offset="I:1408" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="generated" ref="0x405610d0" bit-offset="I:1440" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="288:/usr/include/inttypes.h" ref="0x401c4ee0" defined="" size="I:16" alignment="I:4">
      <field name="quot" ref="0x401ca010" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0x401ca070" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <union loc="106:/usr/include/bits/pthreadtypes.h" ref="0x4030bda0" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0x4030beb0" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x4030bf10" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <enum loc="129:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407df580" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h" ref="0x407dc660" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x404b96c8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x407c88f0" defined="" size="I:1" alignment="I:1">
      <field name="mux" ref="0x407c8a00" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="adlar" ref="0x407c8a60" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="refs" ref="0x407c8ac0" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <union loc="288:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h" ref="0x40dadd70" defined="" size="I:1" alignment="I:1">
      <field name="flat" ref="0x40dade80" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="bits" ref="0x40dadee0" bit-offset="I:0" size="I:1">
        <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40dad878"/></type-tag>
      </field>
    </union>
    <union loc="115:/usr/include/bits/pthreadtypes.h" ref="0x4030f470" defined="" size="I:48" alignment="I:4">
      <field name="__data" ref="0x4030f580" bit-offset="I:0" size="I:44">
        <type-tag size="I:44" alignment="I:4"><struct-ref ref="0x4030ac30"/></type-tag>
      </field>
      <field name="__size" ref="0x4030f5e0" bit-offset="I:0" size="I:48">
        <type-array elements="I:48" size="I:48" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x4030f640" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <attribute name="atomic_hwevent"  loc="NONE" ref="0x4002e5b8" size="V:" alignment="V:">
    </attribute>
    <attribute name="dmemcpy" loc="16:/usr/lib/ncc/deputy_nodeputy.h" ref="0x401bc6e8" defined="" size="I:12" alignment="I:4">
      <field name="a1" ref="0x401bc970" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a2" ref="0x401bc9d0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a3" ref="0x401bca30" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct name="__pthread_mutex_s" loc="78:/usr/include/bits/pthreadtypes.h" ref="0x40307488" defined="" size="I:24" alignment="I:4">
      <field name="__lock" ref="0x4030b010" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__count" ref="0x4030b070" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__owner" ref="0x4030b0d0" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__kind" ref="0x4030b130" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nusers" ref="0x4030b190" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__spins" ref="0x4030b1f0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__list" ref="0x4030b250" bit-offset="I:160" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x40309d38"/>
          <typename><typedef-ref name="__pthread_slist_t" ref="0x40307218"/></typename>
        </type-tag>
      </field>
    </struct>
    <nx_struct name="BCPMsg" loc="55:BcpCollectionExampleC.nc" ref="0x40714ec8" defined="" scoped="" size="I:4" alignment="I:1">
      <component-ref qname="BcpCollectionExampleC"/>
      <field name="data" ref="0x40724190" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
          <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc" ref="0x406b1c70" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="499:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc" ref="0x40ab4db0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc" ref="0x409be4f0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="receive_message" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc" ref="0x40a33da0" defined="" scoped="" size="I:52" alignment="I:4">
      <component-ref qname="CpmModelC"/>
      <field name="source" ref="0x40a520b0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="start" ref="0x40a52110" bit-offset="I:32" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
        </type-int>
      </field>
      <field name="end" ref="0x40a52170" bit-offset="I:96" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
        </type-int>
      </field>
      <field name="power" ref="0x40a521d0" bit-offset="I:160" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="reversePower" ref="0x40a52230" bit-offset="I:224" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="strength" ref="0x40a52290" bit-offset="I:288" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1">
          <typename><typedef-ref name="int8_t" ref="0x401be4b8"/></typename>
        </type-int>
      </field>
      <field name="lost" ref="0x40a522f0" bit-offset="I:296" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0x40a52350" bit-offset="I:304" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
      <field name="msg" ref="0x40a523b0" bit-offset="I:320" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="next" ref="0x40a52410" bit-offset="I:352" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:52" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0x40a33da0"/>
            <typename><typedef-ref name="receive_message_t" scoped="" ref="0x40a53098"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="channel" ref="0x40a52470" bit-offset="I:384" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
      <field name="lqi" ref="0x40a524d0" bit-offset="I:392" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc" ref="0x40ab1ae8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc" ref="0x40ab04a8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="137:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc" ref="0x40ab11d0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendP.nc" ref="0x40b10770" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="UniqueSendP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateImplP.nc" ref="0x40b48a30" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="StateImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc" ref="0x40b52830" defined="" scoped="" size="I:4" alignment="I:2">
      <component-ref qname="UniqueReceiveP"/>
      <field name="source" ref="0x40b52940" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
        </type-int>
      </field>
      <field name="dsn" ref="0x40b529a0" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc" ref="0x40b512c0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="UniqueReceiveP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="286:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc" ref="0x40cd7b68" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="254:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc" ref="0x40cd6478" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="335:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc" ref="0x40cd7248" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" ref="0x40edee20" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc" ref="0x40e9fee8" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" ref="0x40db19f0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" ref="0x40ec50b0" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <struct loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" ref="0x40ec5df8" defined="" scoped="" size="I:12" alignment="I:4">
      <component-ref qname="VirtualizeTimerC"/>
      <field name="t0" ref="0x40ec5f08" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="dt" ref="0x40ec5f68" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
        </type-int>
      </field>
      <field name="isoneshot" ref="0x40ec4010" bit-offset="I:64" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
      <field name="isrunning" ref="0x40ec4070" bit-offset="I:65" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
      <field name="_reserved" ref="0x40ec40d0" bit-offset="I:66" bit-size="I:6">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x40f1b120" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueP.nc" ref="0x40ee8ad8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="161:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x40ee6790" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <struct loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x40f17a40" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueImplP"/>
      <field name="msg" ref="0x40f17b50" bit-offset="I:0" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
            <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc" ref="0x40ff9f40" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SerialActiveMessageC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="32:SafeSerialSendM.nc" ref="0x40faade8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SafeSerialSendM"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc" ref="0x40ff9628" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SerialActiveMessageC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
  </tags>
  <variables>
    <variable name="snr28" ref="0x409fdb48" loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:96" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr17" ref="0x40a2cc08" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:132" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="randCM" ref="0x405d5338" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="dummy" ref="0x40650320" loc="290:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr7" ref="0x40a07390" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:45" size="I:540" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr30" ref="0x40a25ac0" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:7" size="I:84" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="current_node" ref="0x4055e808" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="test" ref="0x405d5830" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr23" ref="0x409fe5a0" loc="22:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:108" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__timezone" ref="0x405fbef0" loc="278:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr12" ref="0x40a10e10" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:16" size="I:192" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr2" ref="0x409f1888" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:42" size="I:504" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="channelTable" ref="0x404ddc48" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x404ca440"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="noiseData" ref="0x405fd3e0" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-array elements="I:1000" size="I:184000" alignment="I:4">
        <type-tag size="I:184" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0x40563d28"/>
          <typename><typedef-ref name="sim_noise_node_t" ref="0x40561188"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="outputs" ref="0x404dd990" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-array elements="I:355" size="I:2840" alignment="I:4">
        <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0x404de040"/>
          <typename><typedef-ref name="sim_log_output_t" ref="0x404de528"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__tzname" ref="0x405fbab0" loc="276:/usr/include/time.h">
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="randU" ref="0x405d6eb0" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-array elements="I:97" size="I:776" alignment="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </type-array>
    </variable>
    <variable name="snr21" ref="0x409dfa20" loc="20:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:108" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr26" ref="0x409e3940" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:96" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="timezone" ref="0x405faa28" loc="292:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="eventHeap" ref="0x40542550" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.c">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0x40515dd0"/>
        <typename><typedef-ref name="heap_t" ref="0x405133b8"/></typename>
      </type-tag>
    </variable>
    <variable name="snr15" ref="0x40a2f238" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:132" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr5" ref="0x40a0d1e0" loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:46" size="I:552" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaRxTxDelay" ref="0x40592478" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numCase1" ref="0x405fe6b8" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr18" ref="0x40a277a8" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:132" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="randC" ref="0x405d5048" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="snr10" ref="0x40a157a8" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:26" size="I:312" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="FreqKeyNum" ref="0x405fd010" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="snr29" ref="0x409fcee8" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:96" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaLow" ref="0x40593068" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaPreambleLength" ref="0x40593910" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr8" ref="0x40a1c230" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:34" size="I:408" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr31" ref="0x40a25178" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:3" size="I:36" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="numTotal" ref="0x405fec88" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="daylight" ref="0x405fa808" loc="291:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaExponentBase" ref="0x40593be8" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_IO_2_1_stdin_" ref="0x4046a010" loc="346:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x40460ca8"/></type-tag>
    </variable>
    <variable name="allSnr" ref="0x40a23c58" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:29" size="I:464" alignment="I:4">
        <type-tag size="I:16" alignment="I:4"><struct-ref name="snr_lqi" ref="0x409e7578"/>
          <typename><typedef-ref name="snr_lqi_t" ref="0x409e7ba0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr24" ref="0x409e7de8" loc="15:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:96" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="randCD" ref="0x405d51c0" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="snr0" ref="0x409fa278" loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:25" size="I:300" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="j97" ref="0x405d5658" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr13" ref="0x40a11048" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:13" size="I:156" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="TOS_NODE_ID" ref="0x404b9c60" loc="70:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="sys_errlist" ref="0x404af010" loc="28:/usr/include/bits/sys_errlist.h">
      <type-qualified const="">
        <type-array elements="V:" size="V:" alignment="V:">
          <type-qualified const="">
            <type-pointer size="I:4" alignment="I:4">
              <type-qualified const="">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </type-qualified>
        </type-array>
      </type-qualified>
    </variable>
    <variable name="snr3" ref="0x409f78e8" loc="26:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:45" size="I:540" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="tzname" ref="0x405fa1c0" loc="283:/usr/include/time.h">
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="STARTING_SIZE" ref="0x4051d2a0" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/heap.c">
      <type-qualified const="">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </variable>
    <variable name="=va_arg" ref="0x4002c128"  loc="NONE">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_IO_2_1_stderr_" ref="0x4046a600" loc="348:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x40460ca8"/></type-tag>
    </variable>
    <variable name="csmaHigh" ref="0x40584dc8" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMaxIterations" ref="0x40593ec8" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="atm128RegFile" ref="0x407c0768" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-array elements="I:1000" size="I:160000" alignment="I:1">
        <type-array elements="I:160" size="I:160" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
          </type-int>
        </type-array>
      </type-array>
    </variable>
    <variable name="localNoise" ref="0x405b36a0" loc="10:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:16016" alignment="I:4">
        <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0x405a49a8"/>
          <typename><typedef-ref name="sim_gain_noise_t" ref="0x405a4e30"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr27" ref="0x409e2ce0" loc="18:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:108" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="_IO_2_1_stdout_" ref="0x4046a308" loc="347:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x40460ca8"/></type-tag>
    </variable>
    <variable name="snr16" ref="0x40a2a5f0" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:132" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaInitLow" ref="0x40584b40" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr6" ref="0x40a002d8" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:45" size="I:540" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="numCase2" ref="0x405fea00" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr19" ref="0x40a28010" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:10" size="I:120" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="sim_ticks" ref="0x4055e5c0" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
      </type-int>
    </variable>
    <variable name="snr22" ref="0x409dd010" loc="21:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:108" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__daylight" ref="0x405fbcc0" loc="277:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stderr" ref="0x40472630" loc="167:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="connectivity" ref="0x405b3288" loc="9:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:4004" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x405aa6c0"/>
            <typename><typedef-ref name="gain_entry_t" ref="0x405aad00"/></typename>
          </type-tag>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="snr11" ref="0x40a18b48" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:20" size="I:240" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="sys_nerr" ref="0x404b1cd8" loc="27:/usr/include/bits/sys_errlist.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stdin" ref="0x40472110" loc="165:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="simTimeBuf" ref="0x40583e10" loc="175:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-array elements="I:128" size="I:128" alignment="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-array>
    </variable>
    <variable name="snr20" ref="0x409e0280" loc="19:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:10" size="I:120" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="sim_seed" ref="0x4055ea08" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_LIB_VERSION" ref="0x4043f010" loc="307:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0x404402b0"/>
        <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0x40440d10"/></typename>
      </type-tag>
    </variable>
    <variable name="sensitivity" ref="0x405b3898" loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="snr25" ref="0x409e5198" loc="16:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:10" size="I:120" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="allSnr_len" ref="0x40a3e450" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="signgam" ref="0x404356f0" loc="161:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaInitHigh" ref="0x405848a0" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr14" ref="0x40a2ec08" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:14" size="I:168" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="stdout" ref="0x404723a0" loc="166:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="csmaAckTime" ref="0x40592718" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaSymbolsPerSec" ref="0x40593348" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMinFreeSamples" ref="0x405921c0" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaBitsPerSymbol" ref="0x40593628" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="i97" ref="0x405d5500" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="radioOnDuration" ref="0x407184b8" loc="45:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="radioOffDuration" ref="0x407187e8" loc="46:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="count" ref="0x40714118" loc="49:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="testTime" ref="0x40714c60" loc="53:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="startTestTime" ref="0x40718198" loc="44:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="lastRadioOnTime" ref="0x40718b08" loc="47:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="parent" ref="0x407143e8" loc="50:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
      </type-int>
    </variable>
    <variable name="commandCount" ref="0x40714638" loc="51:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="commandCountAckCount" ref="0x40714980" loc="52:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="packet" ref="0x4070ff08" loc="43:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </variable>
    <variable name="lastRadioOffTime" ref="0x40718e38" loc="48:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="sim_scheduler_event_pending" ref="0x406b0e00" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="m_tail" ref="0x406b0848" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="m_head" ref="0x406b0638" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="m_next" ref="0x406b0b28" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-array elements="I:15" size="I:15" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="sim_scheduler_event" ref="0x406af1b8" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
        <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
      </type-tag>
    </variable>
    <variable name="radioChannel" ref="0x408ce150" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="bootEvent" ref="0x408cfee8" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
          <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="startTime" ref="0x408cfa88" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="euid" ref="0x408cf860" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="isOn" ref="0x408cfc70" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="buffer" ref="0x40905468" loc="20:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </variable>
    <variable name="bufferPointer" ref="0x409056f8" loc="21:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
          <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="buffer" ref="0x40997b58" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/TossimActiveMessageP.nc">
      <component-ref qname="TossimActiveMessageP"/>
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </variable>
    <variable name="bufferPointer" ref="0x40997de8" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/sim/TossimActiveMessageP.nc">
      <component-ref qname="TossimActiveMessageP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
          <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="channel" ref="0x409db890" loc="12:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="panAddress" ref="0x409dbd00" loc="14:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="address" ref="0x409dbab8" loc="13:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="hwAddressRecognition" ref="0x409da298" loc="16:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="autoAck" ref="0x409da498" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="addressRecognition" ref="0x409da010" loc="15:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="hwAutoAck" ref="0x409da6b0" loc="18:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="collision" ref="0x40a596c8" loc="197:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="requestAck" ref="0x40a33648" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="receiveEvent" ref="0x40a59178" loc="194:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
        <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
      </type-tag>
    </variable>
    <variable name="incomingSource" ref="0x40a59d78" loc="199:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="outstandingReceptionHead" ref="0x40a527a0" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:52" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0x40a33da0"/>
          <typename><typedef-ref name="receive_message_t" scoped="" ref="0x40a53098"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="incoming" ref="0x40a599e0" loc="198:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
          <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="rssi" ref="0x40a33af0" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="clearThreshold" ref="0x40a593a0" loc="196:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="outgoing" ref="0x40a33428" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
          <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="receiving" ref="0x40a33860" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="sendEvent" ref="0x40ad2668" loc="70:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
        <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
      </type-tag>
    </variable>
    <variable name="initialized" ref="0x40ad3010" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="error" ref="0x40b0eb88" loc="285:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="backoffCount" ref="0x40ad35d0" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="neededFreeSamples" ref="0x40ad3850" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="sending" ref="0x40ad3aa0" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
          <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="running" ref="0x40ad32c8" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="receiveBuffer" ref="0x40ad28d8" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </variable>
    <variable name="sendingLength" ref="0x40ad2188" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="transmitting" ref="0x40ad3e58" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="destNode" ref="0x40ad2410" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="addr" ref="0x40b1ef00" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0x40b1ec30" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="localSendId" ref="0x40b10630" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="state" ref="0x40b488b0" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateImplP.nc">
      <documentation loc="73:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateImplP.nc">
        <short> Each component's state - uniqueCount(&#34;State&#34;) of them *</short>
      </documentation>
      <component-ref qname="StateImplP"/>
      <type-array elements="I:2" size="I:2" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="seed" ref="0x40b36cf0" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="recycleSourceElement" ref="0x40b51138" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <documentation loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> History element containing info on a source previously received from *</short>
      </documentation>
      <component-ref qname="UniqueReceiveP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="writeIndex" ref="0x40b52d28" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="receivedMessages" ref="0x40b52af0" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-array elements="I:4" size="I:16" alignment="I:2">
        <type-tag size="I:4" alignment="I:2"><struct-ref scoped="" ref="0x40b52830"/></type-tag>
      </type-array>
    </variable>
    <variable name="localTXCount" ref="0x40bdc1d0" loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="beaconSending" ref="0x40bdd618" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="congestNodeId" ref="0x40bd8300" loc="142:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-array elements="I:12" size="I:24" alignment="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="virtualQueueSize" ref="0x40bdbb10" loc="126:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="sendQeOccupied" ref="0x40bdb7c0" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="nextHopAddress_m" ref="0x40bdc518" loc="96:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
      </type-int>
    </variable>
    <variable name="loopbackMsgPtr" ref="0x40bdb2d8" loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
          <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="VaSeq" ref="0x40bd9b88" loc="139:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="notifyBurstyLinkNeighbor_m" ref="0x40bdcb50" loc="102:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
      </type-int>
    </variable>
    <variable name="radioOn" ref="0x40bdde70" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="dataCRCSuccessCount" ref="0x40bdbdc0" loc="130:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="beaconMsgBuffer" ref="0x40bdd100" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </variable>
    <variable name="nextHopBackpressure_m" ref="0x40bdc850" loc="97:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="nullSeqNo" ref="0x40bdedd0" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="sending" ref="0x40bddba8" loc="86:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="running" ref="0x40bdd8e0" loc="82:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="dataCRCFailCount" ref="0x40bd9068" loc="131:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="snoopCRCFailCount" ref="0x40bd95a8" loc="133:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="latestForwardedTable" ref="0x40bde988" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-array elements="I:48" size="I:288" alignment="I:2">
        <type-tag size="I:6" alignment="I:2"><struct-ref ref="0x40ba5690"/>
          <typename><typedef-ref name="latestForwarded_table_entry" ref="0x40ba5978"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="latestForwardedTableActive" ref="0x40bde4f8" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="Valpha" ref="0x40bd97d8" loc="138:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="loopbackMsg" ref="0x40bdcdb8" loc="109:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </variable>
    <variable name="snoopCRCSuccessCount" ref="0x40bd9318" loc="132:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </variable>
    <variable name="seqno" ref="0x40bdeba0" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="sendQe" ref="0x40bdb578" loc="117:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref ref="0x40ba8998"/>
          <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ba8da0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="congestNodeCount" ref="0x40bd9eb8" loc="141:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="beaconHdr" ref="0x40bdd3c8" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:4" alignment="I:1"><nx_struct-ref ref="0x40baa810"/>
          <typename><typedef-ref name="bcp_beacon_header_t" ref="0x40baaa98"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="routingTableActive" ref="0x40cce4a0" loc="16:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRoutingEngineP.nc">
      <component-ref qname="BcpRoutingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="state_is_root" ref="0x40ccead0" loc="18:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRoutingEngineP.nc">
      <component-ref qname="BcpRoutingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="running" ref="0x40ccecd0" loc="19:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRoutingEngineP.nc">
      <component-ref qname="BcpRoutingEngineP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="routingTable" ref="0x40cce890" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRoutingEngineP.nc">
      <component-ref qname="BcpRoutingEngineP"/>
      <type-array elements="I:48" size="I:576" alignment="I:2">
        <type-tag size="I:12" alignment="I:2"><struct-ref ref="0x40ba7a08"/>
          <typename><typedef-ref name="routing_table_entry" ref="0x40ba7e10"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="index" ref="0x40d0d218" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0x40d0d748" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40d10058"/></type-var>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="free" ref="0x40d0d010" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="pool" ref="0x40d0da00" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/system/PoolP.nc">
      <component-ref qname="PoolP"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40d10058"/></type-var>
      </type-array>
    </variable>
    <variable name="size" ref="0x40d4c010" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
      <component-ref qname="StackC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="stack" ref="0x40d4d8a8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
      <component-ref qname="StackC"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="stack_t" scoped="" ref="0x40d24898"/></type-var>
      </type-array>
      <attribute-value>
        <attribute-ref name="one_nok" ref="0x401bab80"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="one_nok" ref="0x401bab80"/></type-tag>
        </value-structured>
      </attribute-value>
    </variable>
    <variable name="bottom" ref="0x40d4dd50" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
      <component-ref qname="StackC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="top" ref="0x40d4da98" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/StackC.nc">
      <component-ref qname="StackC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="tail" ref="0x40d63d50" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <component-ref qname="QueueC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="size" ref="0x40d61010" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <component-ref qname="QueueC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0x40d638a8" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <component-ref qname="QueueC"/>
      <type-array elements="U:" size="U:" alignment="U:">
        <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x40d672d0"/></type-var>
      </type-array>
      <attribute-value>
        <attribute-ref name="one_nok" ref="0x401bab80"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="one_nok" ref="0x401bab80"/></type-tag>
        </value-structured>
      </attribute-value>
    </variable>
    <variable name="head" ref="0x40d63aa8" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/system/QueueC.nc">
      <component-ref qname="QueueC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="base" ref="0x40db18b0" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="t0" ref="0x40db1530" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0x40db1338" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="dt" ref="0x40db1680" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="oldScale" ref="0x40e05348" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <documentation loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
        <short> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero.</short>
        <long> This variable is needed to keep track of when the underlying&#10;  timer starts, in order to reset lastZero. When oldScale is&#10;  AVR_CLOCK_OFF and the scale is set to something else, the&#10;  clock starts ticking. *</long>
      </documentation>
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="lastZero" ref="0x40e05068" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
      </type-int>
    </variable>
    <variable name="overflow" ref="0x40e6f940" loc="472:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
          <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="compare" ref="0x40e24858" loc="177:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
          <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="savedCounter" ref="0x40e09650" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="inOverflow" ref="0x40e09358" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/sim/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="m_dt" ref="0x40eaeb80" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="m_oneshot" ref="0x40eaed98" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="m_timers_changed" ref="0x40ec46e8" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="m_timers" ref="0x40ec4488" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-tag size="I:12" alignment="I:4"><struct-ref scoped="" ref="0x40ec5df8"/>
          <typename><typedef-ref name="Timer_t" scoped="" ref="0x40ec4188"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="current" ref="0x40f17e20" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0x40f162b0" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref scoped="" ref="0x40f17a40"/>
          <typename><typedef-ref name="queue_entry_t" scoped="" ref="0x40f17c08"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="cancelMask" ref="0x40f167b0" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="Vmax" ref="0x40f567b8" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerP.nc">
      <component-ref qname="BcpRateControllerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="Tthreshold" ref="0x40f542f0" loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerP.nc">
      <component-ref qname="BcpRateControllerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="seqNo" ref="0x40f56d20" loc="26:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerP.nc">
      <component-ref qname="BcpRateControllerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="Tretx" ref="0x40f54010" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerP.nc">
      <component-ref qname="BcpRateControllerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="Valpha" ref="0x40f56a70" loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpRateControllerP.nc">
      <component-ref qname="BcpRateControllerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
    <variable name="mean_m" ref="0x40f93010" loc="8:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/exponentialRandomM.nc">
      <component-ref qname="exponentialRandomM"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </variable>
    <variable name="sending_m" ref="0x40fdb4a0" loc="19:SafeSerialSendM.nc">
      <component-ref qname="SafeSerialSendM"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="serialRunning_m" ref="0x40fdb700" loc="25:SafeSerialSendM.nc">
      <component-ref qname="SafeSerialSendM"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </variable>
    <variable name="overflowCount_m" ref="0x40fdb978" loc="30:SafeSerialSendM.nc">
      <component-ref qname="SafeSerialSendM"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </variable>
  </variables>
  <constants>
    <constant cst="I:3" name="ACIE" ref="0x407a17d0" loc="1075:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCDR7" ref="0x40795d38" loc="943:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PB6" ref="0x407b57a8" loc="1132:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB81" ref="0x407a20a8" loc="1058:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_ADC_DIFF_ADC22_1x" ref="0x407c9380" loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1BL" ref="0x4076c868" loc="140:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_DDRD" ref="0x4076fb70" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOIE0" ref="0x40785738" loc="786:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PING0" ref="0x407c03a0" loc="1299:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="LEDS_LED4" ref="0x406e1898" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_FREE_RUNNING_OFF" ref="0x407df1c0" loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_WAVE16_PWM_CAPTURE_HIGH" ref="0x40d87990" loc="213:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="ROUTING_TABLE_SIZE" ref="0x40b87168" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_ADC_DIFF_ADC51_1x" ref="0x407ca7e0" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SRL0" ref="0x4078c470" loc="705:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS30" ref="0x40796928" loc="924:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINA2" ref="0x407b50a8" loc="1126:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINB4" ref="0x407b3740" loc="1154:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES3" ref="0x40796058" loc="919:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINC6" ref="0x407b1e30" loc="1182:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PKT_NULL" ref="0x40b882a0" loc="14:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADLAR" ref="0x407b80f8" loc="1093:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PA2" ref="0x407b7408" loc="1106:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGMA1" ref="0x4079a438" loc="876:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGMB3" ref="0x407988f8" loc="902:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="TOS_SERIAL_UNKNOWN_ID" ref="0x4068a0b0" loc="87:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWA3" ref="0x4078eb70" loc="687:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1B1" ref="0x4079ab80" loc="882:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADHSM" ref="0x407ab638" loc="961:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INT3" ref="0x40787460" loc="763:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC31" ref="0x4078a3c8" loc="730:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINF3" ref="0x407c23a0" loc="1275:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-1" name="_IEEE_" ref="0x404404a8" loc="297:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_WAVE16_PWM_FAST_COMPARE" ref="0x40d86528" loc="218:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM21" ref="0x4079cae8" loc="858:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM33" ref="0x40796220" loc="920:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_WAVE16_RESERVED" ref="0x40d86058" loc="216:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_SNGL_ADC5" ref="0x407cc420" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:129" name="ATM128_ICR3H" ref="0x4077d130" loc="269:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XMM0" ref="0x4078b0f0" loc="714:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS2" ref="0x4079d038" loc="839:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:62" name="AM_TIMESYNCMSG" ref="0x406d5af8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="_ISgraph" ref="0x40444010" loc="57:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:51" name="ATM128_TCCR0" ref="0x40782450" loc="169:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC1C" ref="0x407959a0" loc="939:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_RIGHT_ADJUST" ref="0x407cd3c8" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PB0" ref="0x407b41e8" loc="1138:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PC2" ref="0x407b28a8" loc="1166:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3AL" ref="0x4077c228" loc="283:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WDP1" ref="0x407ab0f0" loc="956:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PD4" ref="0x407af010" loc="1194:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PE6" ref="0x407ad738" loc="1222:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_CLK8_DIVIDE_128" ref="0x40d97010" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM00" ref="0x4079dac0" loc="847:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ADPS2" ref="0x407b97e8" loc="1086:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWA6" ref="0x4078e630" loc="684:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:140" name="ATM128_TCCR3C" ref="0x4077b138" loc="298:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INT6" ref="0x40788ef8" loc="760:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TS_TIMER_MODE" ref="0x406d3228" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW10" ref="0x4079f0a8" loc="817:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS0" ref="0x407a7220" loc="1004:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_WAVE16_PWM_FAST_8BIT" ref="0x40d88d78" loc="208:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_PORTE" ref="0x40771760" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC0" ref="0x4079d568" loc="844:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PIND0" ref="0x407ad3c8" loc="1218:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINE2" ref="0x407c5ad0" loc="1246:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WDCE" ref="0x407acba0" loc="953:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_PRESCALE_16" ref="0x407c7770" loc="100:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_WAVE16_CTC_CAPTURE" ref="0x40d87e30" loc="215:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES" ref="0x40798730" loc="901:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="ATM128_TCNT0" ref="0x40782230" loc="166:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_POWER_ADC_NR" ref="0x407cfb70" loc="122:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="AVR_CLOCK_DIVIDE_8" ref="0x40d95388" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_COMPARE_SET" ref="0x40d946b0" loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDA6" ref="0x407b7af8" loc="1112:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_CLK8_NORMAL" ref="0x40d6b648" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC71" ref="0x40789230" loc="740:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="REFS0" ref="0x407b9f18" loc="1092:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDF7" ref="0x407c4dd8" loc="1261:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1024" name="_ISalpha" ref="0x4043b7c0" loc="52:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="SERIAL_PROTO_PACKET_UNKNOWN" ref="0x4068abc0" loc="95:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSR" ref="0x40770230" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:55" name="ATM128_TIMSK" ref="0x40782ed8" loc="182:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:46" name="ATM128_TCCR1B" ref="0x407839b0" loc="154:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="NOISE_BIN_SIZE" ref="0x40555e28" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="OCDR2" ref="0x407ac640" loc="948:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM00" ref="0x407a7058" loc="1003:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCIE2" ref="0x407869e0" loc="779:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF3C" ref="0x407a0990" loc="811:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SM2" ref="0x4079f760" loc="821:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PF0" ref="0x407c4c08" loc="1258:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV1" ref="0x407841f8" loc="794:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PG2" ref="0x407c2e18" loc="1283:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ10" ref="0x407a8908" loc="997:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="ATM128_ADC_SNGL_1_23" ref="0x407c9c18" loc="80:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_WAVE8_CTC" ref="0x40d95ab8" loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:59" name="ATM128_RAMPZ" ref="0x40781780" loc="194:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INTF3" ref="0x407862b0" loc="773:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWWC" ref="0x4078e0e0" loc="679:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="RAMPZ0" ref="0x4078a1f0" loc="727:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_ADC_DIFF_ADC10_10x" ref="0x407ccca0" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_ADC_DIFF_ADC22_10x" ref="0x407cb398" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="XDIV3" ref="0x4078b9f0" loc="721:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="HDLC_CTLESC_BYTE" ref="0x4068b158" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE1" ref="0x407a5010" loc="1025:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_WAVE16_PWM_FAST_9BIT" ref="0x40d87010" loc="209:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_ENABLE_OFF" ref="0x407dfda0" loc="136:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="_SVID_" ref="0x40440620" loc="298:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="EOFF" ref="0x401b8b90" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_ENABLE_ON" ref="0x407de010" loc="137:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IEEE154_TYPE_BEACON" ref="0x409c79e0" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3C" ref="0x4077d350" loc="272:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDF1" ref="0x407c38d0" loc="1267:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDG3" ref="0x407c1550" loc="1289:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM1" ref="0x407a5398" loc="1027:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDB0" ref="0x407b3010" loc="1148:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDC2" ref="0x407b1710" loc="1176:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDD4" ref="0x407afde0" loc="1204:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDE6" ref="0x407c6550" loc="1232:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF1B" ref="0x40784038" loc="793:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC3B" ref="0x40795270" loc="933:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PE1" ref="0x407c6010" loc="1227:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE1A" ref="0x40785010" loc="782:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPR0" ref="0x407a90e0" loc="980:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PF3" ref="0x407c46f8" loc="1255:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_CLK8_DIVIDE_8" ref="0x40d6b8a8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SNOOP_QUEUE_SIZE" ref="0x40b87608" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC0" ref="0x407a5568" loc="1030:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ACSR" ref="0x40770878" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCW" ref="0x40771970" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="ATM128_ETIMSK" ref="0x4077eab0" loc="264:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="XDIV6" ref="0x4078b498" loc="718:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_CLK8_DIVIDE_32" ref="0x40d6bb10" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:100" name="ATM128_DDRG" ref="0x40780430" loc="216:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="LEDS_LED7" ref="0x406e0150" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE3" ref="0x40784cc0" loc="802:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINF1" ref="0x407c2730" loc="1277:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PING3" ref="0x407c1e30" loc="1296:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWS5" ref="0x4078d7f8" loc="696:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS21" ref="0x4079ce68" loc="860:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINA5" ref="0x407b6b00" loc="1123:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:112" name="ATM128_TWBR" ref="0x4077f568" loc="238:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:67" name="SERIAL_PROTO_ACK" ref="0x4068a408" loc="92:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1B" ref="0x4076c650" loc="139:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINB7" ref="0x407b31e8" loc="1151:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PA5" ref="0x407b8ed8" loc="1103:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1" ref="0x4076c010" loc="134:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="CONGESTION_COUNT" ref="0x40b86518" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="AM_COLLECTION_DEBUG" ref="0x40ba3c88" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/Collection.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_FLAG_OFF" ref="0x407df7b8" loc="130:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDA1" ref="0x407b63d8" loc="1117:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDB3" ref="0x407b4ab8" loc="1145:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDC5" ref="0x407b11d0" loc="1173:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDD7" ref="0x407af8a0" loc="1201:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_FREE_RUNNING_ON" ref="0x407df400" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_CLK8_DIVIDE_1024" ref="0x40d974f8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_WAVE16_PWM_FAST_CAPTURE" ref="0x40d862c0" loc="217:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_MIN_TRACE" ref="0x40554778" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3BL" ref="0x4077dbb8" loc="278:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC10" ref="0x4078acb0" loc="735:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINF6" ref="0x407c3e30" loc="1272:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDF2" ref="0x407c3710" loc="1266:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDG4" ref="0x407c1390" loc="1288:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS02" ref="0x4079de48" loc="849:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM00" ref="0x4079d730" loc="845:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM12" ref="0x40797768" loc="912:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_POWER_IDLE" ref="0x407cf920" loc="121:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COMB0" ref="0x4079beb8" loc="873:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:35" name="FAST_BEACON_TIME" ref="0x40b887e8" loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ERESERVE" ref="0x4055b2f0" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="LINK_LOSS_V" ref="0x40b860a8" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="UART_QUEUE_SIZE" ref="0x406b3d40" loc="5:BcpCollectionExample.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE1" ref="0x407a6ab0" loc="1022:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_ADC_DIFF_ADC01_1x" ref="0x407cbc80" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:144" name="ATM128_UBRR0H" ref="0x4077b360" loc="301:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:154" name="ATM128_UCSR1B" ref="0x4077bc00" loc="313:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_ISblank" ref="0x404447c0" loc="58:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE" ref="0x407a43b0" loc="1040:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ADIE" ref="0x407b9620" loc="1085:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:146" name="AM_BCP_DELAY" ref="0x40b85140" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="JTD" ref="0x4079fca8" loc="826:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_ENABLE_OFF" ref="0x407e0488" loc="112:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:109" name="ATM128_XMCRA" ref="0x4077f130" loc="232:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM3C1" ref="0x40799db8" loc="894:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIF" ref="0x407abf08" loc="968:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SRE" ref="0x407a0d18" loc="815:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_PINC" ref="0x4076e010" loc="87:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SRW01" ref="0x4078c638" loc="706:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINC1" ref="0x407b0730" loc="1187:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PIND3" ref="0x407aee48" loc="1215:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINE5" ref="0x407c5578" loc="1243:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:56" name="ATM128_EIFR" ref="0x40781120" loc="185:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:53" name="ATM128_MCUCR" ref="0x40782aa8" loc="176:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="IEEE154_FCF_SECURITY_ENABLED" ref="0x409828f0" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCDR0" ref="0x407ac9d0" loc="950:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3" ref="0x4077c660" loc="287:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_SNGL_ADC2" ref="0x407cddc8" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_ADC_DIFF_ADC32_200x" ref="0x407cba50" loc="65:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_PRESCALE_4" ref="0x407c7348" loc="98:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDE1" ref="0x407c6e10" loc="1237:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:49" name="ATM128_OCR0" ref="0x40782010" loc="163:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC50" ref="0x40789b18" loc="745:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:39" name="ATM128_ICR1H" ref="0x4076c430" loc="136:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3L" ref="0x4077eed0" loc="268:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INTF1" ref="0x40786640" loc="775:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="EINVAL" ref="0x401b8f28" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_ADC_DIFF_ADC10_200x" ref="0x407cb160" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_ADC_DIFF_ADC22_200x" ref="0x407cb810" loc="64:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN" ref="0x405550a0" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_ADC_DIFF_ADC12_1x" ref="0x407c9150" loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SE" ref="0x4079f250" loc="818:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ADSC" ref="0x407b90e0" loc="1082:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="OCDR5" ref="0x407ac0e8" loc="945:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PB4" ref="0x407b5b08" loc="1134:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PC6" ref="0x407b21e8" loc="1162:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:43" name="ATM128_OCR1AH" ref="0x40783138" loc="146:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1CL" ref="0x4077e228" loc="254:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_PINF" ref="0x40771120" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_DDRB" ref="0x4076e860" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="LEDS_LED2" ref="0x406e12e8" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINA0" ref="0x407b5438" loc="1128:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINB2" ref="0x407b3ad0" loc="1156:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINC4" ref="0x407b01d8" loc="1184:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PIND6" ref="0x407ae8f0" loc="1212:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES1" ref="0x407973d8" loc="910:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWPS0" ref="0x4078df08" loc="700:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN" ref="0x407a4ac0" loc="1044:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="MAX_FWD_DLY" ref="0x40b87808" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ01" ref="0x407a73f0" loc="1005:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PA0" ref="0x407b7768" loc="1108:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IEEE154_ADDR_NONE" ref="0x409c65f8" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL1" ref="0x407a8010" loc="992:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INTF6" ref="0x40787d40" loc="770:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWA1" ref="0x4078eef0" loc="689:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC1" ref="0x407a68e8" loc="1021:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_TIMER_COMPARE_SET" ref="0x40d8a888" loc="180:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM1C1" ref="0x4079af20" loc="884:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INT1" ref="0x407877e0" loc="765:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_ENABLE_ON" ref="0x407e0690" loc="113:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_WAVE16_CTC_COMPARE" ref="0x40d88b30" loc="207:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM31" ref="0x407981d8" loc="896:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS0" ref="0x4079d398" loc="841:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE1" ref="0x407a35a8" loc="1052:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-5" name="NOISE_MAX" ref="0x405552f8" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ACME" ref="0x407ab7f8" loc="962:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCL" ref="0x40771d68" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC1A" ref="0x40795610" loc="937:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PC0" ref="0x407b2c08" loc="1168:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PD2" ref="0x407af370" loc="1196:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PE4" ref="0x407ada98" loc="1224:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PF6" ref="0x407c41e8" loc="1252:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ADPS0" ref="0x407b9b78" loc="1088:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWA4" ref="0x4078e9b0" loc="686:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM0" ref="0x407a9638" loc="985:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_ADC_DIFF_ADC21_1x" ref="0x407ca150" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FP_NAN" ref="0x40435988" loc="204:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:139" name="ATM128_TCCR3A" ref="0x4077cee0" loc="295:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_COMPARE_OFF" ref="0x40d940a8" loc="82:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="NOISE_DEFAULT_ELEMENT_SIZE" ref="0x405542f0" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_CLK16_EXTERNAL_RISE" ref="0x40d96ad8" loc="62:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_PORTC" ref="0x4076e440" loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB80" ref="0x407a2d50" loc="1067:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINE0" ref="0x407c5e60" loc="1248:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS00" ref="0x4079c1f8" loc="851:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ITIMER_VIRTUAL" ref="0x4054c010" loc="99:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS12" ref="0x40797928" loc="913:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:90" name="LINK_LOSS_ALPHA" ref="0x40b87e90" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC" ref="0x40798570" loc="900:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE0" ref="0x407a2628" loc="1063:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:60" name="ATM128_XDIV" ref="0x40781990" loc="197:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDA4" ref="0x407b7e78" loc="1114:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDB6" ref="0x407b4578" loc="1142:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPMEN" ref="0x40788b68" loc="756:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC01" ref="0x4078ae78" loc="736:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDF5" ref="0x407c31d0" loc="1263:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="BLBSET" ref="0x40788610" loc="753:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PGWRT" ref="0x407887d8" loc="754:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOCC" ref="0x40796e78" loc="929:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COMA1" ref="0x4079b960" loc="870:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="ATM128_OSCCAL" ref="0x4077f358" loc="235:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="AS0" ref="0x4079b218" loc="864:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM10" ref="0x407a83a0" loc="994:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:98" name="ATM128_PORTF" ref="0x40780010" loc="210:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL1" ref="0x407a8ad8" loc="998:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN1" ref="0x407a3b08" loc="1055:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ACBG" ref="0x407a12b0" loc="1072:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE0" ref="0x40785570" loc="785:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF3A" ref="0x407a0440" loc="808:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SM0" ref="0x4079f5b0" loc="820:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PG0" ref="0x407c11c0" loc="1285:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:149" name="ATM128_UCSR0C" ref="0x4077b588" loc="304:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:45" name="ATM128_TCNT1H" ref="0x40783788" loc="151:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3L" ref="0x4077c878" loc="288:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDE" ref="0x407acd50" loc="954:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADFR" ref="0x407b92a0" loc="1083:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="MUX1" ref="0x407b87f8" loc="1097:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_ADC_DIFF_ADC02_1x" ref="0x407cae70" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_PRESCALE_32" ref="0x407c7988" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="FP_ZERO" ref="0x40435cb0" loc="208:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM3A0" ref="0x40799848" loc="891:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XDIV1" ref="0x4078bd80" loc="723:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ2" ref="0x407a4e48" loc="1046:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3A" ref="0x4077c010" loc="282:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:156" name="ATM128_UDR1" ref="0x4077a058" loc="319:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="IEEE154_ADDR_SHORT" ref="0x409c6840" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDG1" ref="0x407c18d0" loc="1291:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FALSE" ref="0x404b9840" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="EBUSY" ref="0x401b8d58" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="ATM128_TIMER0_TICKSPPS" ref="0x407db5c8" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDC0" ref="0x407b1a90" loc="1178:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDD2" ref="0x407ae1d0" loc="1206:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDE4" ref="0x407c68d0" loc="1234:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="CHANNEL_BANDGAP" ref="0x407db148" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE3C" ref="0x40784e90" loc="803:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_CLK16_OFF" ref="0x40d97940" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC41" ref="0x40789ce0" loc="746:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_XOPEN_" ref="0x404407a0" loc="299:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWGCE" ref="0x4078d2a8" loc="691:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CSB1" ref="0x40798e40" loc="905:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="IEEE154_FCF_SRC_ADDR_MODE" ref="0x409c7580" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MUX4" ref="0x407b82b8" loc="1094:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_POWER_EXT_STANDBY" ref="0x407cfdf8" loc="123:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR0" ref="0x407a5c60" loc="1034:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PB7" ref="0x407b55f8" loc="1131:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_WAVE8_PWM_FAST" ref="0x40d95cc8" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE1" ref="0x407853a8" loc="784:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="DEFAULT_CHANNEL_SIZE" ref="0x404d2df8" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_DDRE" ref="0x40771540" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="LEDS_LED5" ref="0x406e1b70" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PING1" ref="0x407c01d8" loc="1298:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="AM_COLLECTION_DATA" ref="0x40ba37d0" loc="32:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/Collection.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_COMPARE_CLEAR" ref="0x40d944c0" loc="84:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWS3" ref="0x4078db78" loc="698:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SRL1" ref="0x4078c2b0" loc="704:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:116" name="ATM128_TWCR" ref="0x4077fda8" loc="250:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS31" ref="0x40796768" loc="923:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINA3" ref="0x407b6e90" loc="1125:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINB5" ref="0x407b3578" loc="1153:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINC7" ref="0x407b1c68" loc="1181:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="CPOL" ref="0x407aab68" loc="977:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IEEE154_FCF_FRAME_TYPE" ref="0x40982640" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SPE" ref="0x407aa628" loc="974:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PA3" ref="0x407b7258" loc="1105:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="IEEE154_TYPE_DATA" ref="0x409c7c20" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_ADC_DIFF_ADC11_1x" ref="0x407cbeb0" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM1A0" ref="0x4079a9b0" loc="881:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:115" name="ATM128_TWDR" ref="0x4077fb98" loc="247:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INT4" ref="0x407872a0" loc="762:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3CL" ref="0x4077d568" loc="273:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:135" name="ATM128_OCR3AH" ref="0x4077c440" loc="284:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC20" ref="0x4078a920" loc="733:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINF4" ref="0x407c21d8" loc="1274:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM10" ref="0x40799498" loc="887:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_SNGL_ADC6" ref="0x407cc628" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XMM1" ref="0x4078cf18" loc="713:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COMC0" ref="0x4079a270" loc="875:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="NOISE_QUANTIZE_INTERVAL" ref="0x40555820" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="CONGEST_HOP_TX" ref="0x40b86738" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="IEEE154_FCF_DEST_ADDR_MODE" ref="0x409c72f0" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PB1" ref="0x407b4038" loc="1137:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PC3" ref="0x407b26f8" loc="1165:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="_ISpunct" ref="0x404437c0" loc="60:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="WDP2" ref="0x407acf10" loc="955:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PD5" ref="0x407b0e18" loc="1193:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PE7" ref="0x407ad588" loc="1221:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:152" name="ATM128_UBRR1H" ref="0x4077b7b0" loc="307:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM01" ref="0x4079d8f8" loc="846:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUSR" ref="0x40782670" loc="172:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="IEEE154_FCF_FRAME_PENDING" ref="0x40982b80" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="IEEE154_TYPE_ACK" ref="0x409c7e58" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE3" ref="0x40784758" loc="799:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDRF" ref="0x4079e058" loc="828:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM0" ref="0x4079e920" loc="835:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RWWSRE" ref="0x40788440" loc="752:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE" ref="0x407a4740" loc="1042:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INT7" ref="0x40788d38" loc="759:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16384" name="_ISprint" ref="0x404457c0" loc="56:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE0" ref="0x407a5aa0" loc="1033:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_CLK16_DIVIDE_1024" ref="0x40d965a8" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SRW11" ref="0x4078c9c8" loc="708:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_PINA" ref="0x4076ec90" loc="105:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS1" ref="0x407a8568" loc="995:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1000" name="LOG_UPDATE_TIME" ref="0x40b88a10" loc="26:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PIND1" ref="0x407ad200" loc="1217:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINE3" ref="0x407c5908" loc="1245:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWSTA" ref="0x40779d20" loc="677:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWIE" ref="0x4078e460" loc="681:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1" ref="0x40783358" loc="149:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_SNGL_ADC0" ref="0x407cd9b8" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_PRESCALE_2" ref="0x407c8f00" loc="96:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDA7" ref="0x407b7938" loc="1111:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="CHANNEL_GND" ref="0x407db348" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC60" ref="0x40789788" loc="743:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="REFS1" ref="0x407b9d50" loc="1091:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_ADC_DIFF_ADC00_200x" ref="0x407ccee0" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE0" ref="0x407a2288" loc="1061:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_PRESCALE_128" ref="0x407c7dc0" loc="103:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_ADC_DIFF_ADC71_1x" ref="0x407cac40" loc="73:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:122" name="ATM128_TCCR1C" ref="0x4077e668" loc="258:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCDR3" ref="0x407ac478" loc="947:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PB2" ref="0x407b5e68" loc="1136:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM01" ref="0x407a8e80" loc="1002:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:41" name="ATM128_OCR1BH" ref="0x4076ca80" loc="141:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PC4" ref="0x407b2548" loc="1164:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PD6" ref="0x407b0c68" loc="1192:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_POSIX_" ref="0x40440920" loc="300:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOV2" ref="0x40785ac8" loc="790:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PF1" ref="0x407c4a58" loc="1257:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PG3" ref="0x407c2c68" loc="1282:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ11" ref="0x407a8738" loc="996:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:145" name="AM_BCP_DATA" ref="0x40b86ed8" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="TIMESYNCMSG_LEN" ref="0x406d3010" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INTF4" ref="0x407860e8" loc="772:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="IEEE154_ADDR_EXT" ref="0x409c6a78" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_SPCR" ref="0x4076f330" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="XDIV4" ref="0x4078b828" loc="720:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC" ref="0x407a7b00" loc="1011:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWEN" ref="0x4078e2a0" loc="680:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PKT_NORMAL" ref="0x40b880a8" loc="13:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="ATM128_ASSR" ref="0x40783de8" loc="160:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_WAVE16_NORMAL" ref="0x40d882a8" loc="203:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_POWER_SAVE" ref="0x407ce058" loc="124:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="__codecvt_error" ref="0x40459ed8" loc="210:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDB1" ref="0x407b4e38" loc="1147:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDC3" ref="0x407b1550" loc="1175:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDD5" ref="0x407afc20" loc="1203:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDE7" ref="0x407c6390" loc="1231:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCF1C" ref="0x407a0b58" loc="812:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC3C" ref="0x40795438" loc="934:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PD0" ref="0x407af6d0" loc="1198:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE1B" ref="0x407851e0" loc="783:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SPR1" ref="0x407aaee8" loc="979:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PE2" ref="0x407addf8" loc="1226:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PF4" ref="0x407c4548" loc="1254:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:33" name="ATM128_WDTCR" ref="0x4076d580" loc="119:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN0" ref="0x407a27f0" loc="1064:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CHANNEL_THERMISTOR" ref="0x407dcbc8" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL" ref="0x407a92b8" loc="983:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_CLK16_NORMAL" ref="0x40d97b90" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM20" ref="0x4079c920" loc="857:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XMBK" ref="0x4078cb98" loc="711:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC1" ref="0x407a6728" loc="1020:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5000" name="BEACON_TIME" ref="0x40b885b0" loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF3" ref="0x407a0278" loc="807:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:57" name="ATM128_EIMSK" ref="0x40781340" loc="188:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ENOMEM" ref="0x4055b6a8" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_PORTA" ref="0x4076d130" loc="111:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWS6" ref="0x4078d638" loc="695:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS22" ref="0x4079cca8" loc="859:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS10" ref="0x40797ca8" loc="915:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC3" ref="0x40797e80" loc="918:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ACIS0" ref="0x407a1d20" loc="1078:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINA6" ref="0x407b6938" loc="1122:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1C" ref="0x4077e010" loc="253:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_ADC_DIFF_ADC32_10x" ref="0x407cb5d0" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:106" name="ATM128_EICRA" ref="0x40780ca8" loc="226:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="__codecvt_partial" ref="0x40459d08" loc="209:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ACI" ref="0x407a1610" loc="1074:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE" ref="0x407a7cc0" loc="1012:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PA6" ref="0x407b8d28" loc="1102:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:69" name="SERIAL_PROTO_PACKET_NOACK" ref="0x4068a910" loc="94:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="CHANNEL_BATTERY" ref="0x407dce98" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDA2" ref="0x407b6218" loc="1116:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDB4" ref="0x407b48f8" loc="1144:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDC6" ref="0x407b1010" loc="1172:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC11" ref="0x4078aae8" loc="734:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINF7" ref="0x407c3c68" loc="1271:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_WAVE16_PWM_10BIT" ref="0x40d888f8" loc="206:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDF3" ref="0x407c3550" loc="1265:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_PRESCALE_2b" ref="0x407c7138" loc="97:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XDIVEN" ref="0x4078b2d0" loc="717:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOCA" ref="0x40796af8" loc="927:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM01" ref="0x4079dc88" loc="848:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM13" ref="0x407975a0" loc="911:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COMB1" ref="0x4079bcf0" loc="872:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ELAST" ref="0x4055ba50" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE" ref="0x407a61e8" loc="1015:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="IVSEL" ref="0x4079f928" loc="822:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_ADC_DIFF_ADC32_1x" ref="0x407c95b0" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ACIC" ref="0x407a1990" loc="1076:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_UCSR0A" ref="0x40770ef0" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:157" name="ATM128_UCSR1C" ref="0x4077a280" loc="322:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_CLK16_DIVIDE_64" ref="0x40d960a8" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TSM" ref="0x407ab470" loc="960:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PUD" ref="0x407ab9a8" loc="963:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DORD" ref="0x407aa7e8" loc="975:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADIF" ref="0x407b9460" loc="1084:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_START_CONVERSION_OFF" ref="0x407e0a98" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB8" ref="0x407a31f8" loc="1048:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:108" name="ATM128_XMCRB" ref="0x40780ec8" loc="229:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM3B0" ref="0x40799be8" loc="893:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="JTRF" ref="0x4079fe68" loc="827:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_PIND" ref="0x4076f960" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="LEDS_LED0" ref="0x406e2c90" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINB0" ref="0x407b3e60" loc="1158:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCF2" ref="0x40785908" loc="789:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM0" ref="0x4079eca0" loc="837:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINC2" ref="0x407b0568" loc="1186:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PIND4" ref="0x407aec80" loc="1214:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ0" ref="0x407a9b88" loc="988:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINE6" ref="0x407c53b0" loc="1242:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_TIMER_COMPARE_CLEAR" ref="0x40d8a648" loc="179:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPMIE" ref="0x407880a8" loc="750:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCDR1" ref="0x407ac808" loc="949:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_SNGL_ADC3" ref="0x407cc010" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PSR0" ref="0x407abb68" loc="964:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WCOL" ref="0x407aa0e0" loc="969:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDD0" ref="0x407ae550" loc="1208:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDE2" ref="0x407c6c50" loc="1236:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_WAVE16_PWM_9BIT" ref="0x40d886d8" loc="205:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE3A" ref="0x40784928" loc="800:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="_ISOC_" ref="0x40440aa8" loc="301:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC51" ref="0x40789950" loc="744:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X0" ref="0x407a4010" loc="1036:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:113" name="ATM128_TWSR" ref="0x4077f778" loc="241:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MUX2" ref="0x407b8638" loc="1096:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="OCDR6" ref="0x40795f00" loc="944:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="FWD_DLY_PKT_COUNT" ref="0x40b87a48" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB80" ref="0x407a2f18" loc="1068:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PB5" ref="0x407b5958" loc="1133:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PC7" ref="0x407b2038" loc="1161:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_DDRC" ref="0x4076e220" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="LEDS_LED3" ref="0x406e15c0" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:99" name="ATM128_PING" ref="0x40780220" loc="213:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE" ref="0x407a4578" loc="1041:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="__codecvt_ok" ref="0x40459b20" loc="208:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWPS1" ref="0x4078dd40" loc="699:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINA1" ref="0x407b5270" loc="1127:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINB3" ref="0x407b3908" loc="1155:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINC5" ref="0x407b0010" loc="1183:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PIND7" ref="0x407ae728" loc="1211:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ02" ref="0x407a2b88" loc="1066:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PA1" ref="0x407b75b8" loc="1107:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGMA0" ref="0x4079a600" loc="877:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGMB2" ref="0x40798ac0" loc="903:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_CLK8_DIVIDE_256" ref="0x40d97280" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INTF7" ref="0x40787b78" loc="769:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWA2" ref="0x4078ed30" loc="688:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CHANNEL_RSSI" ref="0x407dc8d8" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_PRESCALE_8" ref="0x407c7558" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TCR0UB" ref="0x4079b788" loc="867:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM1B0" ref="0x4079ad50" loc="883:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INT2" ref="0x40787620" loc="764:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:133" name="ATM128_OCR3BH" ref="0x4077ddd0" loc="279:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC30" ref="0x4078a590" loc="731:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ITIMER_PROF" ref="0x4054c230" loc="103:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINF2" ref="0x407c2568" loc="1276:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PING4" ref="0x407c1c68" loc="1295:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_PRESCALE" ref="0x407e0010" loc="107:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM20" ref="0x4079c590" loc="855:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM32" ref="0x407963e8" loc="921:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:28" name="ATM128_ADC_DIFF_ADC42_1x" ref="0x407c97e0" loc="78:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_SNGL_ADC4" ref="0x407cc218" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_WAVE16_PWM_CAPTURE_LOW" ref="0x40d874c8" loc="211:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="FORWARDING_QUEUE_SIZE" ref="0x40b873d0" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS1" ref="0x4079d1e8" loc="840:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1AL" ref="0x4076ceb8" loc="145:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWINT" ref="0x40779998" loc="675:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_CLK16_DIVIDE_256" ref="0x40d96320" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="ATM128_SFIOR" ref="0x4076d360" loc="116:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_SERIAL_CC1000_ID" ref="0x4068bbc8" loc="85:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TS_USER_MODE" ref="0x406d3438" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC" ref="0x40771b68" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_IScntrl" ref="0x40443010" loc="59:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC1B" ref="0x407957d8" loc="938:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM" ref="0x407a6558" loc="1017:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PC1" ref="0x407b2a58" loc="1167:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WDP0" ref="0x407ab2b0" loc="957:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PD3" ref="0x407af1c0" loc="1195:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PE5" ref="0x407ad8e8" loc="1223:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PF7" ref="0x407c4038" loc="1251:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_WAVE16_PWM_FAST_10BIT" ref="0x40d87268" loc="210:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ADPS1" ref="0x407b99b0" loc="1087:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWA5" ref="0x4078e7f0" loc="685:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE1" ref="0x40786d78" loc="781:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="EXTRF" ref="0x4079e3e0" loc="830:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM1" ref="0x407a9478" loc="984:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ" ref="0x407a4c80" loc="1045:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_POWER_STANDBY" ref="0x407ce2b8" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="BORF" ref="0x4079e218" loc="829:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:138" name="ATM128_TCCR3B" ref="0x4077ccb8" loc="292:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB81" ref="0x407a3ea0" loc="1057:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_PORTD" ref="0x4076fd90" loc="84:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINE1" ref="0x407c5c98" loc="1247:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS01" ref="0x4079c038" loc="850:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PGERS" ref="0x407889a0" loc="755:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="__codecvt_noconv" ref="0x40463110" loc="211:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE1" ref="0x407a3778" loc="1053:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ADEN" ref="0x407a1ef0" loc="1081:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADMUX" ref="0x40770668" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4096" name="_ISxdigit" ref="0x404467c8" loc="54:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDA5" ref="0x407b7cb8" loc="1113:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="TOS_AM_GROUP" ref="0x4067b5b8" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDB7" ref="0x407b43b8" loc="1141:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC70" ref="0x407893f8" loc="741:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDF6" ref="0x407c3010" loc="1262:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:137" name="ATM128_TCNT3H" ref="0x4077ca90" loc="289:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="AVR_CLOCK_OFF" ref="0x40d96f10" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:68" name="SERIAL_PROTO_PACKET_ACK" ref="0x4068a680" loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:47" name="ATM128_TCCR1A" ref="0x40783bd8" loc="157:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:63" name="ATM128_SREG" ref="0x40781bb0" loc="202:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM11" ref="0x407a81d8" loc="993:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:121" name="ATM128_OCR1CH" ref="0x4077e440" loc="255:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FP_NORMAL" ref="0x40440030" loc="212:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:512" name="_ISlower" ref="0x4043b010" loc="51:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_START_CONVERSION_ON" ref="0x407e0d00" loc="119:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOS_SERIAL_ACTIVE_MESSAGE_ID" ref="0x4068b968" loc="84:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:101" name="ATM128_PORTG" ref="0x40780650" loc="219:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF3B" ref="0x407a0608" loc="809:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SM1" ref="0x4079f400" loc="819:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PG1" ref="0x407c1010" loc="1284:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOV0" ref="0x40784578" loc="796:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_UBRR0L" ref="0x40770aa0" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INTF2" ref="0x40786478" loc="774:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ECANCEL" ref="0x401b89d0" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="FP_SUBNORMAL" ref="0x40435e68" loc="210:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM3A1" ref="0x40799678" loc="890:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_SPDR" ref="0x4076f750" loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XDIV2" ref="0x4078bbb8" loc="722:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_VREF_2_56" ref="0x407cd010" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_CLK8_DIVIDE_64" ref="0x40d6bd78" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR" ref="0x407a6038" loc="1014:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE0" ref="0x407a5e20" loc="1035:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_ADC_DIFF_ADC31_1x" ref="0x407ca380" loc="69:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_HASHTABLE_SIZE" ref="0x40554550" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3B" ref="0x4077d9a0" loc="277:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X" ref="0x407a6398" loc="1016:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="REROUTE_TIME" ref="0x40b88c20" loc="27:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_TIMER_COMPARE_TOGGLE" ref="0x40d8a408" loc="178:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_VREF_RSVD" ref="0x407ced20" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDF0" ref="0x407c3a90" loc="1268:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDG2" ref="0x407c1710" loc="1290:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_DIFF_ADC00_10x" ref="0x407cca68" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM0" ref="0x407a41d8" loc="1037:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW" ref="0x407a0ec8" loc="816:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ACD" ref="0x407a10f0" loc="1071:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_CLK16_DIVIDE_8" ref="0x40d97df8" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDC1" ref="0x407b18d0" loc="1177:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDD3" ref="0x407ae010" loc="1205:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDE5" ref="0x407c6710" loc="1233:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF1A" ref="0x40785e50" loc="792:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC3A" ref="0x407950a8" loc="932:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PE0" ref="0x407c61c0" loc="1228:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PF2" ref="0x407c48a8" loc="1256:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUCSR" ref="0x40782888" loc="173:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS" ref="0x407a97f8" loc="986:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PG4" ref="0x407c2ab8" loc="1281:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_WAVE16_PWM_COMPARE_LOW" ref="0x40d87728" loc="212:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1L" ref="0x4076c220" loc="135:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ENOACK" ref="0x4055b878" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CSB2" ref="0x40798c80" loc="904:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:355" name="SIM_LOG_OUTPUT_COUNT" ref="0x404dd5b8" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPI2X" ref="0x407aa2a8" loc="970:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_CLK16_EXTERNAL_FALL" ref="0x40d96840" loc="61:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:126" name="HDLC_FLAG_BYTE" ref="0x4068ced0" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CPHA" ref="0x407aad28" loc="978:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF1" ref="0x40785c88" loc="791:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR1" ref="0x407a6e20" loc="1024:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="IEEE154_TYPE_MAC_CMD" ref="0x409c6180" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:97" name="ATM128_DDRF" ref="0x40781dd0" loc="207:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOIE2" ref="0x40786ba8" loc="780:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINF0" ref="0x407c28f8" loc="1278:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:64" name="LEDS_LED6" ref="0x406e1e48" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PING2" ref="0x407c0010" loc="1297:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_WAVE8_PWM" ref="0x40d958d8" loc="75:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWS4" ref="0x4078d9b8" loc="697:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRL2" ref="0x4078c0f0" loc="703:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ERETRY" ref="0x4055b108" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS20" ref="0x4079b058" loc="861:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC1" ref="0x40797210" loc="909:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1A" ref="0x4076cca0" loc="144:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS32" ref="0x407965a8" loc="922:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINA4" ref="0x407b6cc8" loc="1124:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINB6" ref="0x407b33b0" loc="1152:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PA4" ref="0x407b70a8" loc="1104:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDA0" ref="0x407b6598" loc="1118:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM1A1" ref="0x4079a7e0" loc="880:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDB2" ref="0x407b4c78" loc="1146:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INT5" ref="0x407870e0" loc="761:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDC4" ref="0x407b1390" loc="1174:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDD6" ref="0x407afa60" loc="1202:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:256" name="_ISupper" ref="0x4043d840" loc="50:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC21" ref="0x4078a758" loc="732:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINF5" ref="0x407c2010" loc="1273:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWSTO" ref="0x40779ee8" loc="678:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM11" ref="0x407992d0" loc="886:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XMM2" ref="0x4078cd58" loc="712:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_SNGL_ADC7" ref="0x407cc830" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COMC1" ref="0x4079a0a8" loc="874:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PSR321" ref="0x407abd38" loc="965:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:124" name="ATM128_ETIFR" ref="0x4077e888" loc="261:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:37" name="ATM128_TCCR2" ref="0x4076dde0" loc="131:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE0" ref="0x407a58f0" loc="1032:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:155" name="ATM128_UCSR1A" ref="0x4077be28" loc="316:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="LINK_EST_ALPHA" ref="0x40b87c68" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM1" ref="0x4079ee60" loc="838:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM3C0" ref="0x40798010" loc="895:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIE" ref="0x407aa478" loc="973:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE1" ref="0x407a6c60" loc="1023:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_PINB" ref="0x4076e650" loc="96:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SRW00" ref="0x4078c800" loc="707:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF0" ref="0x407843b8" loc="795:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC2" ref="0x4079c3c8" loc="854:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINC0" ref="0x407b08f8" loc="1188:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PIND2" ref="0x407ad038" loc="1216:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINE4" ref="0x407c5740" loc="1244:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_VREF_OFF" ref="0x407ce8b8" loc="35:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE" ref="0x407a7e68" loc="1013:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FP_INFINITE" ref="0x40435b30" loc="206:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_WAVE8_NORMAL" ref="0x40d956f8" loc="74:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ACO" ref="0x407a1460" loc="1073:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_LEFT_ADJUST" ref="0x407cd638" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="AVR_CLOCK_ON" ref="0x40d95140" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_TIMER_COMPARE_NORMAL" ref="0x40d8a1c0" loc="177:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN_QUANTIZE" ref="0x405555a8" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MSTR" ref="0x407aa9a8" loc="976:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="PER_HOP_MAC_DLY" ref="0x40b862d0" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:29" name="ATM128_ADC_DIFF_ADC52_1x" ref="0x407c9a10" loc="79:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:36" name="ATM128_TCNT2" ref="0x4076dbc0" loc="128:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_SNGL_ADC1" ref="0x407cdbc0" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="NOISE_NUM_VALUES" ref="0x40554bf0" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDE0" ref="0x407c5010" loc="1238:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC61" ref="0x407895c0" loc="742:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE1" ref="0x407a33d8" loc="1051:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INTF0" ref="0x40786808" loc="776:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PORF" ref="0x4079e5a0" loc="831:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB8" ref="0x407a3038" loc="1047:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_VREF_AVCC" ref="0x407ceb18" loc="36:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCDR4" ref="0x407ac2b0" loc="946:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PB3" ref="0x407b5cb8" loc="1135:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PC5" ref="0x407b2398" loc="1163:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PD7" ref="0x407b0ab8" loc="1191:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOS_SERIAL_802_15_4_ID" ref="0x4068be38" loc="86:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2048" name="_ISdigit" ref="0x40446010" loc="53:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCR0UB" ref="0x4079b5b8" loc="866:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADCH" ref="0x40770010" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV3" ref="0x407a07c8" loc="810:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ00" ref="0x407a75c0" loc="1006:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ12" ref="0x407a3cd8" loc="1056:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1L" ref="0x40783570" loc="150:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL0" ref="0x407a8cb8" loc="1001:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="FORWARD" ref="0x40ba9b20" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INTF5" ref="0x40787f08" loc="771:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:137" name="AM_UARTPACKET" ref="0x406b2010" loc="6:BcpCollectionExample.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWA0" ref="0x4078d0e0" loc="690:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC0" ref="0x407a5728" loc="1031:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCR" ref="0x40780870" loc="222:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="IEEE154_FCF_ACK_REQ" ref="0x40982dd0" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_WAVE16_PWM_8BIT" ref="0x40d884c0" loc="204:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM1C0" ref="0x40799108" loc="885:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SUCCESS" ref="0x401b8470" loc="41:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ESIZE" ref="0x401b87f8" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="XDIV5" ref="0x4078b660" loc="719:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INT0" ref="0x407879a0" loc="766:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IVCE" ref="0x4079fae8" loc="823:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:131" name="ATM128_OCR3CH" ref="0x4077d780" loc="274:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM30" ref="0x407983a0" loc="897:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_COMPARE_TOGGLE" ref="0x40d942b8" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_FLAG_ON" ref="0x407df9d0" loc="131:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE0" ref="0x407a2458" loc="1062:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:65535" name="AM_BROADCAST_ADDR" ref="0x4067b278" loc="15:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_ADC_DIFF_ADC61_1x" ref="0x407caa10" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FAIL" ref="0x401b8630" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PD1" ref="0x407af520" loc="1197:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCIE1C" ref="0x407a00a8" loc="804:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PE3" ref="0x407adc48" loc="1225:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PF5" ref="0x407c4398" loc="1253:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="_ISalnum" ref="0x40442010" loc="61:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="AM_COLLECTION_CONTROL" ref="0x40ba3a38" loc="33:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/Collection.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSRA" ref="0x40770448" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN1" ref="0x407a3940" loc="1054:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="ATM128_OCDR" ref="0x4076d790" loc="122:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM21" ref="0x4079c758" loc="856:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="EALREADY" ref="0x4055b4d8" loc="50:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_ADC_DIFF_ADC41_1x" ref="0x407ca5b0" loc="70:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="ATM128_ADC_SNGL_GND" ref="0x407c9e10" loc="81:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ACIS1" ref="0x407a1b58" loc="1077:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_PORTB" ref="0x4076ea80" loc="102:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWS7" ref="0x4078d478" loc="694:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS11" ref="0x40797ae8" loc="914:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINA7" ref="0x407b6770" loc="1121:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="LOCAL_SEND" ref="0x40ba9948" loc="100:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:114" name="ATM128_TWAR" ref="0x4077f988" loc="244:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:58" name="ATM128_EICRB" ref="0x40781560" loc="191:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PA7" ref="0x407b8b78" loc="1101:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:54" name="ATM128_TIFR" ref="0x40782cb8" loc="179:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3" ref="0x4077ecc0" loc="267:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_PRESCALE_64" ref="0x407c7ba0" loc="102:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDA3" ref="0x407b6058" loc="1115:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDB5" ref="0x407b4738" loc="1143:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDC7" ref="0x407b2dd8" loc="1171:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC00" ref="0x40789058" loc="737:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDF4" ref="0x407c3390" loc="1264:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOCB" ref="0x40796cb8" loc="928:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_CLK8_OFF" ref="0x40d6b400" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_AM_ADDRESS" ref="0x4067b7e8" loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COMA0" ref="0x4079bb28" loc="871:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="MAX_RETX_ATTEMPTS" ref="0x40b88e60" loc="28:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="AD_CONTROL_TRIG" ref="0x40b86970" loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_WAVE16_PWM_COMPARE_HIGH" ref="0x40d87bf8" loc="214:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC" ref="0x4079e760" loc="834:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL0" ref="0x407a7790" loc="1007:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN0" ref="0x407a29b8" loc="1065:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_UCSR0B" ref="0x40770cc8" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:153" name="ATM128_UBRR1L" ref="0x4077b9d8" loc="310:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_SPSR" ref="0x4076f540" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC" ref="0x407a7950" loc="1010:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_POWER_DOWN" ref="0x407ce4f8" loc="126:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MUX0" ref="0x407b89b8" loc="1098:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ITIMER_REAL" ref="0x4054dd30" loc="96:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN" ref="0x407a4900" loc="1043:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:144" name="AM_BCP_BEACON" ref="0x40b86cd8" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM3B1" ref="0x40799a18" loc="892:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XDIV0" ref="0x4078a010" loc="724:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_PINE" ref="0x40771330" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="LEDS_LED1" ref="0x406e1010" loc="34:/home/xinchaol/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_DDRA" ref="0x4076eea0" loc="108:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TCN0UB" ref="0x4079b3e8" loc="865:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINB1" ref="0x407b3c98" loc="1157:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1" ref="0x4079eae0" loc="836:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINC3" ref="0x407b03a0" loc="1185:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ1" ref="0x407a99c0" loc="987:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PIND5" ref="0x407aeab8" loc="1213:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINE7" ref="0x407c51e8" loc="1241:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWEA" ref="0x40779b58" loc="676:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_UDR0" ref="0x4076f120" loc="66:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDG0" ref="0x407c1a90" loc="1292:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="IEEE154_FCF_INTRAPAN" ref="0x409c7058" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/IEEE802154.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="RWWSB" ref="0x40788270" loc="751:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TRUE" ref="0x404b99f0" loc="68:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDD1" ref="0x407ae390" loc="1207:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="NOISE_HISTORY" ref="0x40554058" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDE3" ref="0x407c6a90" loc="1235:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:35" name="ATM128_OCR2" ref="0x4076d9a0" loc="125:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="IDRD" ref="0x40795b70" loc="942:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCSR" ref="0x40780a88" loc="223:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE3B" ref="0x40784af8" loc="801:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8192" name="_ISspace" ref="0x40445010" loc="55:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC40" ref="0x40789ea8" loc="747:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X1" ref="0x407a51d0" loc="1026:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CSB0" ref="0x40797038" loc="906:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL" ref="0x407a9d50" loc="989:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="MUX3" ref="0x407b8478" loc="1095:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="NO_TASK" ref="0x406b03d8" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="NUM_TASKS" ref="0x406b0200" loc="47:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="syncDoneTask" ref="0x409be3e0" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="read_rssi_task" ref="0x40ab4ca0" loc="499:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="stopDoneTask" ref="0x40ab19d8" loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="sendDoneTask" ref="0x40ab10c0" loc="137:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="startDoneTask" ref="0x40ab0298" loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="S_SENDING" ref="0x40b10a20" loc="58:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_IDLE" ref="0x40b10888" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_IDLE" ref="0x40b48bc0" loc="77:/home/xinchaol/local/src/tinyos-2.x/tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="INVALID_ELEMENT" ref="0x40b514a8" loc="67:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="snoopHandlerTask" ref="0x40cd7a58" loc="286:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="sendBeaconTask" ref="0x40cd6368" loc="254:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="sendDataTask" ref="0x40cd7138" loc="335:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MINDT" ref="0x40db1b78" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:230" name="MAXT" ref="0x40db1d48" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="Atm128AlarmAsyncP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="fired" ref="0x40e9fdd8" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="END_OF_LIST" ref="0x40ec54c8" loc="45:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="updateFromTimer" ref="0x40eded10" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="NUM_TIMERS" ref="0x40ec52c8" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="NUM_CLIENTS" ref="0x40ee7010" loc="40:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="errorTask" ref="0x40ee6680" loc="161:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="CancelTask" ref="0x40f1b010" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="sendTask" ref="0x40faacd8" loc="32:SafeSerialSendM.nc">
      <component-ref qname="SafeSerialSendM"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="startDone" ref="0x40ff9e30" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="stopDone" ref="0x40ff9518" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
  </constants>
  <functions>
  </functions>
  <typedefs>
    <typedef name="intptr_t" ref="0x401c3ea8" loc="126:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="intptr_t" ref="0x401c3ea8"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_packet_t" ref="0x40686868" loc="123:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_packet" ref="0x40686250"/>
        <typename><typedef-ref name="serial_packet_t" ref="0x40686868"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR3B_t" ref="0x40d83010" loc="238:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d856a0"/>
        <typename><typedef-ref name="Atm128_TCCR3B_t" ref="0x40d83010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_spinlock_t" ref="0x403118e0" loc="201:/usr/include/bits/pthreadtypes.h">
      <type-qualified volatile="">
          <typename><typedef-ref name="pthread_spinlock_t" ref="0x403118e0"/></typename>
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </typedef>
    <typedef name="wchar_t" ref="0x401b66c8" loc="323:/usr/lib/gcc/i686-linux-gnu/4.4.5/include/stddef.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="wchar_t" ref="0x401b66c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Admux_t" ref="0x407c8b78" loc="90:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x407c88f0"/>
        <typename><typedef-ref name="Atm128Admux_t" ref="0x407c8b78"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ushort" ref="0x402fc290" loc="152:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="ushort" ref="0x402fc290"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_footer_t" ref="0x4068dc08" loc="17:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x4068d850"/>
        <typename><typedef-ref name="tossim_footer_t" ref="0x4068dc08"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_G_uint32_t" ref="0x4045b830" loc="56:/usr/include/_G_config.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_G_uint32_t" ref="0x4045b830"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int64_t" ref="0x402ed0c8" loc="47:/usr/include/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__int64_t" ref="0x402ed0c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int16_t" ref="0x402ee7a0" loc="39:/usr/include/bits/types.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__int16_t" ref="0x402ee7a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_header_t" ref="0x40686048" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x406885d0"/>
        <typename><typedef-ref name="serial_header_t" ref="0x40686048"/></typename>
      </type-tag>
    </typedef>
    <typedef name="TMilli" ref="0x406d0bf0" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406d0a28"/>
        <typename><typedef-ref name="TMilli" ref="0x406d0bf0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_G_int16_t" ref="0x4045ce00" loc="53:/usr/include/_G_config.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="_G_int16_t" ref="0x4045ce00"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_char" ref="0x402eaa58" loc="31:/usr/include/bits/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__u_char" ref="0x402eaa58"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT0_t" ref="0x40d92010" loc="102:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT0_t" ref="0x40d92010"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1BL_t" ref="0x40d81b30" loc="269:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1BL_t" ref="0x40d81b30"/></typename>
      </type-int>
    </typedef>
    <typedef name="__intptr_t" ref="0x402f7f28" loc="189:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__intptr_t" ref="0x402f7f28"/></typename>
      </type-int>
    </typedef>
    <typedef name="__qaddr_t" ref="0x402f7ae0" loc="185:/usr/include/bits/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__quad_t" ref="0x402ed5c8"/></typename>
        </type-int>
        <typename><typedef-ref name="__qaddr_t" ref="0x402f7ae0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="Atm128_OCR2_t" ref="0x40d92a88" loc="107:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR2_t" ref="0x40d92a88"/></typename>
      </type-int>
    </typedef>
    <typedef name="fd_set" ref="0x402ffbf8" loc="78:/usr/include/sys/select.h">
      <type-tag size="I:128" alignment="I:4"><struct-ref ref="0x402ffa30"/>
        <typename><typedef-ref name="fd_set" ref="0x402ffbf8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_time_t" ref="0x404b8010" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x404b8010"/></typename>
      </type-int>
    </typedef>
    <typedef name="__caddr_t" ref="0x402f7d08" loc="186:/usr/include/bits/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="__caddr_t" ref="0x402f7d08"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__time_t" ref="0x402f4130" loc="149:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__time_t" ref="0x402f4130"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ssize_t" ref="0x402f75d0" loc="180:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__ssize_t" ref="0x402f75d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="float_t" ref="0x40359888" loc="38:/usr/include/bits/mathdef.h">
      <type-float cname="long double" size="I:12" alignment="I:4">
        <typename><typedef-ref name="float_t" ref="0x40359888"/></typename>
      </type-float>
    </typedef>
    <typedef name="mode_t" ref="0x402fad48" loc="71:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="mode_t" ref="0x402fad48"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR1C_t" ref="0x40d82340" loc="253:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d83d58"/>
        <typename><typedef-ref name="Atm128_TCCR1C_t" ref="0x40d82340"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_IO_lock_t" ref="0x40459068" loc="180:/usr/include/libio.h">
      <type-void size="I:1" alignment="I:1">
        <typename><typedef-ref name="_IO_lock_t" ref="0x40459068"/></typename>
      </type-void>
    </typedef>
    <typedef name="int_least32_t" ref="0x401c0ba8" loc="68:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_least32_t" ref="0x401c0ba8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__builtin_va_list" ref="0x4002c028"  loc="NONE">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x40026f48"/></type-tag>
      </type-pointer>
    </typedef>
    <typedef name="__uint32_t" ref="0x402eee48" loc="42:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uint32_t" ref="0x402eee48"/></typename>
      </type-int>
    </typedef>
    <typedef name="TimeSyncMsg" ref="0x406d57d8" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/ftsp/TimeSyncMsg.h">
      <type-tag size="I:13" alignment="I:1"><nx_struct-ref name="TimeSyncMsg" ref="0x406c2d08"/>
        <typename><typedef-ref name="TimeSyncMsg" ref="0x406d57d8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="TMicro" ref="0x406da488" loc="31:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406da2c0"/>
        <typename><typedef-ref name="TMicro" ref="0x406da488"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fsfilcnt_t" ref="0x402f70e8" loc="177:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fsfilcnt_t" ref="0x402f70e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="fe_queue_entry_t" ref="0x40ba8da0" loc="119:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-tag size="I:28" alignment="I:4"><struct-ref ref="0x40ba8998"/>
        <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ba8da0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="collection_id_t" ref="0x40ba3f20" loc="37:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/Collection.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="collection_id_t" ref="0x40ba3f20"/></typename>
      </type-int>
    </typedef>
    <typedef name="nlink_t" ref="0x402f9010" loc="76:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="nlink_t" ref="0x402f9010"/></typename>
      </type-int>
    </typedef>
    <typedef name="clock_t" ref="0x402f84e8" loc="60:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clock_t" ref="0x402f84e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1BH_t" ref="0x40d818a8" loc="268:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1BH_t" ref="0x40d818a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_collection_id_t" ref="0x40ba0200" loc="38:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/ctp/Collection.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_collection_id_t" ref="0x40ba0200"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_condattr_t" ref="0x4030fdb8" loc="136:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x4030fb90"/>
        <typename><typedef-ref name="pthread_condattr_t" ref="0x4030fdb8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="heap_t" ref="0x405133b8" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/heap.h">
      <documentation loc="42:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/heap.h">
        <short>&#10; </short>
        <long>&#10; @author Philip Levis&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="heap" ref="0x40515dd0"/>
        <typename><typedef-ref name="heap_t" ref="0x405133b8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__gid_t" ref="0x402f1010" loc="136:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gid_t" ref="0x402f1010"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint16_t" ref="0x402aa018" loc="400:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
        <typename><typedef-ref name="nxle_uint16_t" ref="0x402aa018"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_channel_t" ref="0x404def28" loc="53:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_log_channel" ref="0x404de740"/>
        <typename><typedef-ref name="sim_log_channel_t" ref="0x404def28"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int" ref="0x402f6878" loc="36:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int" ref="0x402f6878"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_once_t" ref="0x4030d290" loc="144:/usr/include/bits/pthreadtypes.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_once_t" ref="0x4030d290"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint" ref="0x402fc488" loc="153:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint" ref="0x402fc488"/></typename>
      </type-int>
    </typedef>
    <typedef name="am_group_t" ref="0x4067dcc0" loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_group_t" ref="0x4067dcc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR3C_t" ref="0x40d82670" loc="256:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d83d58"/>
        <typename><typedef-ref name="Atm128_TCCR3C_t" ref="0x40d82670"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least8_t" ref="0x401c10f0" loc="77:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_least8_t" ref="0x401c10f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsid_t" ref="0x402ef568" loc="144:/usr/include/bits/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402ef3a0"/>
        <typename><typedef-ref name="__fsid_t" ref="0x402ef568"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCNT1H_t" ref="0x40d82918" loc="260:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT1H_t" ref="0x40d82918"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT3L_t" ref="0x40d81100" loc="263:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT3L_t" ref="0x40d81100"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast32_t" ref="0x401c39d8" loc="111:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_fast32_t" ref="0x401c39d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="blksize_t" ref="0x40304978" loc="229:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="blksize_t" ref="0x40304978"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least64_t" ref="0x401c0e28" loc="73:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_least64_t" ref="0x401c0e28"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ETIFR_t" ref="0x40dab558" loc="315:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40dab330"/>
        <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40dab558"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__pid_t" ref="0x402ef068" loc="143:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__pid_t" ref="0x402ef068"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_int" ref="0x402eaeb0" loc="33:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__u_int" ref="0x402eaeb0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT2_t" ref="0x40d92810" loc="106:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT2_t" ref="0x40d92810"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1AL_t" ref="0x40d81620" loc="267:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1AL_t" ref="0x40d81620"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_event_t" ref="0x404bf108" loc="43:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
      <type-tag size="I:28" alignment="I:4"><struct-ref name="sim_event" ref="0x404c1e70"/>
        <typename><typedef-ref name="sim_event_t" ref="0x404bf108"/></typename>
      </type-tag>
    </typedef>
    <typedef name="error_t" ref="0x40613340" loc="56:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
      <documentation loc="23:/home/xinchaol/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="error_t" ref="0x40613340"/></typename>
      </type-int>
    </typedef>
    <typedef name="__sig_atomic_t" ref="0x402fb868" loc="24:/usr/include/bits/sigset.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__sig_atomic_t" ref="0x402fb868"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_SFIOR_t" ref="0x40d8bd78" loc="169:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8bb50"/>
        <typename><typedef-ref name="Atm128_SFIOR_t" ref="0x40d8bd78"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__daddr_t" ref="0x402f4830" loc="153:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__daddr_t" ref="0x402f4830"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino_t" ref="0x402f1260" loc="137:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__ino_t" ref="0x402f1260"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_uint16_t" ref="0x4045b4d0" loc="55:/usr/include/_G_config.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="_G_uint16_t" ref="0x4045b4d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least8_t" ref="0x401c0728" loc="66:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_least8_t" ref="0x401c0728"/></typename>
      </type-int>
    </typedef>
    <typedef name="FILE" ref="0x40454df8" loc="49:/usr/include/stdio.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/>
        <typename><typedef-ref name="FILE" ref="0x40454df8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__compar_fn_t" ref="0x40338730" loc="742:/usr/include/stdlib.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:4" alignment="I:4">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:4" alignment="I:4">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <typename><typedef-ref name="__compar_fn_t" ref="0x40338730"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__locale_t" ref="0x402bada0" loc="40:/usr/include/xlocale.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:116" alignment="I:4"><struct-ref name="__locale_struct" ref="0x402bbef8"/></type-tag>
        <typename><typedef-ref name="__locale_t" ref="0x402bada0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="Atm128_ADCL_t" ref="0x407dc500" loc="152:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCL_t" ref="0x407dc500"/></typename>
      </type-int>
    </typedef>
    <typedef name="__mode_t" ref="0x402f1730" loc="139:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__mode_t" ref="0x402f1730"/></typename>
      </type-int>
    </typedef>
    <typedef name="locale_t" ref="0x402be048" loc="43:/usr/include/xlocale.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="I:116" alignment="I:4"><struct-ref name="__locale_struct" ref="0x402bbef8"/></type-tag>
        <typename><typedef-ref name="locale_t" ref="0x402be048"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="radio_stats_t" ref="0x406883c8" loc="110:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:18" alignment="I:2"><struct-ref name="radio_stats" ref="0x4068adb0"/>
        <typename><typedef-ref name="radio_stats_t" ref="0x406883c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="clockid_t" ref="0x402f8a50" loc="92:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clockid_t" ref="0x402f8a50"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR1H_t" ref="0x40dae2a0" loc="282:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR1H_t" ref="0x40dae2a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR3L_t" ref="0x40daea20" loc="285:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR3L_t" ref="0x40daea20"/></typename>
      </type-int>
    </typedef>
    <typedef name="gid_t" ref="0x402fab08" loc="66:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="gid_t" ref="0x402fab08"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsid_t" ref="0x402fa250" loc="40:/usr/include/sys/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402ef3a0"/>
        <typename><typedef-ref name="fsid_t" ref="0x402fa250"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_packet_t" ref="0x40672158" loc="51:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_packet.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_packet.h">
        <short>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.</short>
        <long>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.&#10;&#10; @author Philip Levis&#10; @date   Jan 2 2006&#10;</long>
      </documentation>
      <type-tag size="I:0" alignment="I:1"><struct-ref name="sim_packet" ref="0x40673f08"/>
        <typename><typedef-ref name="sim_packet_t" ref="0x40672158"/></typename>
      </type-tag>
    </typedef>
    <typedef name="int8_t" ref="0x401be4b8" loc="37:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int8_t" ref="0x401be4b8"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_output_t" ref="0x404de528" loc="46:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-tag size="I:8" alignment="I:4"><struct-ref name="sim_log_output" ref="0x404de040"/>
        <typename><typedef-ref name="sim_log_output_t" ref="0x404de528"/></typename>
      </type-tag>
    </typedef>
    <typedef name="suseconds_t" ref="0x402ff0d8" loc="49:/usr/include/sys/select.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="suseconds_t" ref="0x402ff0d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="sigset_t" ref="0x403002c0" loc="38:/usr/include/sys/select.h">
      <type-tag size="I:128" alignment="I:4"><struct-ref ref="0x402fbe58"/>
        <typename><typedef-ref name="sigset_t" ref="0x403002c0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128Adcsra_t" ref="0x407dc010" loc="149:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x407debc0"/>
        <typename><typedef-ref name="Atm128Adcsra_t" ref="0x407dc010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="T32khz" ref="0x406da048" loc="30:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x406d0e68"/>
        <typename><typedef-ref name="T32khz" ref="0x406da048"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_short" ref="0x402f6650" loc="35:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_short" ref="0x402f6650"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_header_t" ref="0x4068d648" loc="13:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:8" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x4067ba10"/>
        <typename><typedef-ref name="tossim_header_t" ref="0x4068d648"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ptrdiff_t" ref="0x401b6260" loc="149:/usr/lib/gcc/i686-linux-gnu/4.4.5/include/stddef.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ptrdiff_t" ref="0x401b6260"/></typename>
      </type-int>
    </typedef>
    <typedef name="blkcnt_t" ref="0x40304bf0" loc="236:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="blkcnt_t" ref="0x40304bf0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint32_t" ref="0x401c0230" loc="52:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x401c0230"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint64_t" ref="0x402aa968" loc="402:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nxle_uint64_t">
        <typename><typedef-ref name="nxle_uint64_t" ref="0x402aa968"/></typename>
      </type-int>
    </typedef>
    <typedef name="latestForwarded_table_entry" ref="0x40ba5978" loc="145:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <documentation loc="135:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
        <short>&#10; This structure is used to track the last&#10;  &#60;source, packetID, hopCount> triplet received&#10;  from a given neighbor.</short>
        <long>&#10; This structure is used to track the last&#10;  &#60;source, packetID, hopCount> triplet received&#10;  from a given neighbor.&#10;</long>
      </documentation>
      <type-tag size="I:6" alignment="I:2"><struct-ref ref="0x40ba5690"/>
        <typename><typedef-ref name="latestForwarded_table_entry" ref="0x40ba5978"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nx_uint8_t" ref="0x402a8728" loc="389:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_uint8_t" ref="0x402a8728"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintptr_t" ref="0x401c40e8" loc="129:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uintptr_t" ref="0x401c40e8"/></typename>
      </type-int>
    </typedef>
    <typedef name="caddr_t" ref="0x402f8010" loc="117:/usr/include/sys/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="caddr_t" ref="0x402f8010"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__u_long" ref="0x402ee100" loc="34:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__u_long" ref="0x402ee100"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast64_t" ref="0x401c3c78" loc="113:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_fast64_t" ref="0x401c3c78"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT3H_t" ref="0x40d82e28" loc="262:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT3H_t" ref="0x40d82e28"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint16_t" ref="0x402ee9f0" loc="40:/usr/include/bits/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__uint16_t" ref="0x402ee9f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_char" ref="0x402f6400" loc="34:/usr/include/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_char" ref="0x402f6400"/></typename>
      </type-int>
    </typedef>
    <typedef name="mcu_power_t" ref="0x407d07d0" loc="114:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="mcu_power_t" ref="0x407d07d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast16_t" ref="0x401c1e08" loc="97:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_fast16_t" ref="0x401c1e08"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1AH_t" ref="0x40d81398" loc="266:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1AH_t" ref="0x40d81398"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR1CL_t" ref="0x40db0068" loc="271:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1CL_t" ref="0x40db0068"/></typename>
      </type-int>
    </typedef>
    <typedef name="fpos_t" ref="0x40474de8" loc="111:/usr/include/stdio.h">
      <type-tag size="I:12" alignment="I:4"><struct-ref ref="0x4045c1f8"/>
        <typename><typedef-ref name="fpos_t" ref="0x40474de8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR1B_t" ref="0x40d85c10" loc="235:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d856a0"/>
        <typename><typedef-ref name="Atm128_TCCR1B_t" ref="0x40d85c10"/></typename>
      </type-tag>
    </typedef>
    <typedef name="div_t" ref="0x402df238" loc="102:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402df010"/>
        <typename><typedef-ref name="div_t" ref="0x402df238"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_gain_noise_t" ref="0x405a4e30" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="sim_gain_noise" ref="0x405a49a8"/>
        <typename><typedef-ref name="sim_gain_noise_t" ref="0x405a4e30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="size_t" ref="0x401b6498" loc="211:/usr/lib/gcc/i686-linux-gnu/4.4.5/include/stddef.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="size_t" ref="0x401b6498"/></typename>
      </type-int>
    </typedef>
    <typedef name="routing_table_entry" ref="0x40ba7e10" loc="133:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <documentation loc="121:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
        <short>&#10; This structure is used by the routing engine to store&#10;  the routing table.</short>
        <long>&#10; This structure is used by the routing engine to store&#10;  the routing table.&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:2"><struct-ref ref="0x40ba7a08"/>
        <typename><typedef-ref name="routing_table_entry" ref="0x40ba7e10"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uint8_t" ref="0x402ee558" loc="38:/usr/include/bits/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__uint8_t" ref="0x402ee558"/></typename>
      </type-int>
    </typedef>
    <typedef name="__sigset_t" ref="0x40300048" loc="32:/usr/include/bits/sigset.h">
      <type-tag size="I:128" alignment="I:4"><struct-ref ref="0x402fbe58"/>
        <typename><typedef-ref name="__sigset_t" ref="0x40300048"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR0_t" ref="0x40d93d70" loc="101:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d93660"/>
        <typename><typedef-ref name="Atm128_TCCR0_t" ref="0x40d93d70"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__loff_t" ref="0x402f7860" loc="184:/usr/include/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__loff_t" ref="0x402f7860"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino64_t" ref="0x402f14f0" loc="138:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__ino64_t" ref="0x402f14f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_id_t" ref="0x4067d200" loc="6:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <documentation loc="25:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
        <short>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.</short>
        <long>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.&#10;&#10; @author Philip Levis&#10; @date   Dec 2 2005&#10; Revision:  $Revision$&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_id_t" ref="0x4067d200"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_header_t" ref="0x40685630" loc="44:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:8" alignment="I:1"><union-ref name="message_header" ref="0x40685060"/>
        <typename><typedef-ref name="message_header_t" ref="0x40685630"/></typename>
      </type-tag>
    </typedef>
    <typedef name="gain_entry_t" ref="0x405aad00" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.h">
        <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.</short>
        <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:16" alignment="I:4"><struct-ref name="gain_entry" ref="0x405aa6c0"/>
        <typename><typedef-ref name="gain_entry_t" ref="0x405aad00"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_addr_t" ref="0x4067df20" loc="12:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x4067df20"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int32_t" ref="0x402a5e50" loc="387:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="int" size="I:4" alignment="I:1" network="nx_int32_t">
        <typename><typedef-ref name="nx_int32_t" ref="0x402a5e50"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ADCH_t" ref="0x407dc288" loc="151:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCH_t" ref="0x407dc288"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least16_t" ref="0x401c1468" loc="78:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint_least16_t" ref="0x401c1468"/></typename>
      </type-int>
    </typedef>
    <typedef name="__io_close_fn" ref="0x40467878" loc="384:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
        </function-parameters>
        <typename><typedef-ref name="__io_close_fn" ref="0x40467878"/></typename>
      </type-function>
    </typedef>
    <typedef name="uint8_t" ref="0x401bedb8" loc="49:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x401bedb8"/></typename>
      </type-int>
    </typedef>
    <typedef name="bcp_data_header_t" ref="0x40baa010" loc="71:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <documentation loc="7:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
        <short>&#10; PKT_NORMAL: Indicates that a BCP packet contains source-originated data.</short>
        <long>&#10; PKT_NORMAL: Indicates that a BCP packet contains source-originated data.&#10; PKT_NULL: Indicates that a BCP packet was dropped, and a subsequent virtual&#10;           packet was eventually forwarded.&#10;</long>
      </documentation>
      <type-tag size="I:23" alignment="I:1"><nx_struct-ref ref="0x40bac8a8"/>
        <typename><typedef-ref name="bcp_data_header_t" ref="0x40baa010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="time_t" ref="0x402f8788" loc="76:/usr/include/time.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="time_t" ref="0x402f8788"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int8_t" ref="0x402a7918" loc="395:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nxle_int8_t">
        <typename><typedef-ref name="nxle_int8_t" ref="0x402a7918"/></typename>
      </type-int>
    </typedef>
    <typedef name="lldiv_t" ref="0x402dfe30" loc="122:/usr/include/stdlib.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x402dfc08"/>
        <typename><typedef-ref name="lldiv_t" ref="0x402dfe30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_IO_FILE" ref="0x40460ac0" loc="341:/usr/include/libio.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/>
        <typename><typedef-ref name="_IO_FILE" ref="0x40460ac0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_attr_t" ref="0x40309ab0" loc="57:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:36" alignment="I:4"><union-ref ref="0x40309888"/>
        <typename><typedef-ref name="pthread_attr_t" ref="0x40309ab0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__io_seek_fn" ref="0x40467310" loc="381:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:4" alignment="I:4">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="__off64_t" ref="0x402f1e28"/></typename>
            </type-int>
          </type-pointer>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_seek_fn" ref="0x40467310"/></typename>
      </type-function>
    </typedef>
    <typedef name="pid_t" ref="0x402f9688" loc="99:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pid_t" ref="0x402f9688"/></typename>
      </type-int>
    </typedef>
    <typedef name="timer_t" ref="0x402f8cd0" loc="104:/usr/include/time.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="timer_t" ref="0x402f8cd0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="pthread_rwlockattr_t" ref="0x40311650" loc="195:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:8" alignment="I:4"><union-ref ref="0x40311228"/>
        <typename><typedef-ref name="pthread_rwlockattr_t" ref="0x40311650"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR0_t" ref="0x40d92288" loc="103:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR0_t" ref="0x40d92288"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint64_t" ref="0x402ed358" loc="48:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__uint64_t" ref="0x402ed358"/></typename>
      </type-int>
    </typedef>
    <typedef name="__dev_t" ref="0x402edb20" loc="134:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__dev_t" ref="0x402edb20"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int32_t" ref="0x402ab258" loc="397:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="int" size="I:4" alignment="I:1" network="nxle_int32_t">
        <typename><typedef-ref name="nxle_int32_t" ref="0x402ab258"/></typename>
      </type-int>
    </typedef>
    <typedef name="va_list" ref="0x40474b80" loc="80:/usr/include/stdio.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x40026f48"/></type-tag>
        <typename><typedef-ref name="va_list" ref="0x40474b80"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__off_t" ref="0x402f1ba8" loc="141:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__off_t" ref="0x402f1ba8"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast8_t" ref="0x401c1be0" loc="91:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_fast8_t" ref="0x401c1be0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blkcnt_t" ref="0x402f3620" loc="169:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__blkcnt_t" ref="0x402f3620"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_metadata_t" ref="0x4068c8a0" loc="29:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:6" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x4068de20"/>
        <typename><typedef-ref name="tossim_metadata_t" ref="0x4068c8a0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_id_t" ref="0x4067da68" loc="10:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_id_t" ref="0x4067da68"/></typename>
      </type-int>
    </typedef>
    <typedef name="bcp_beacon_header_t" ref="0x40baaa98" loc="83:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-tag size="I:4" alignment="I:1"><nx_struct-ref ref="0x40baa810"/>
        <typename><typedef-ref name="bcp_beacon_header_t" ref="0x40baaa98"/></typename>
      </type-tag>
    </typedef>
    <typedef name="intmax_t" ref="0x401c4348" loc="139:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="intmax_t" ref="0x401c4348"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlCapture_t" ref="0x40d858c8" loc="232:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d856a0"/>
        <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x40d858c8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR2_t" ref="0x40d92590" loc="105:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d93660"/>
        <typename><typedef-ref name="Atm128_TCCR2_t" ref="0x40d92590"/></typename>
      </type-tag>
    </typedef>
    <typedef name="serial_metadata_t" ref="0x40686e30" loc="127:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref name="serial_metadata" ref="0x40686a80"/>
        <typename><typedef-ref name="serial_metadata_t" ref="0x40686e30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fsblkcnt_t" ref="0x402f3b58" loc="173:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fsblkcnt_t" ref="0x402f3b58"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint16_t" ref="0x401c0010" loc="50:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x401c0010"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_fpos_t" ref="0x4045c420" loc="26:/usr/include/_G_config.h">
      <type-tag size="I:12" alignment="I:4"><struct-ref ref="0x4045c1f8"/>
        <typename><typedef-ref name="_G_fpos_t" ref="0x4045c420"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int8_t" ref="0x402fc7f0" loc="201:/usr/include/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_int8_t" ref="0x402fc7f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCNT1L_t" ref="0x40d82ba0" loc="261:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_TCNT1L_t" ref="0x40d82ba0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3CH_t" ref="0x40db0d20" loc="278:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3CH_t" ref="0x40db0d20"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_group_t" ref="0x4067d598" loc="7:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_group_t" ref="0x4067d598"/></typename>
      </type-int>
    </typedef>
    <typedef name="__timer_t" ref="0x402f3148" loc="161:/usr/include/bits/types.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="__timer_t" ref="0x402f3148"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="message_metadata_t" ref="0x406842b0" loc="52:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:6" alignment="I:1"><union-ref name="message_metadata" ref="0x40685e60"/>
        <typename><typedef-ref name="message_metadata_t" ref="0x406842b0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__io_write_fn" ref="0x404689c0" loc="372:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__ssize_t" ref="0x402f75d0"/></typename>
        </type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:4" alignment="I:4">
            <type-qualified const="">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </type-pointer>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="size_t" ref="0x401b6498"/></typename>
          </type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_write_fn" ref="0x404689c0"/></typename>
      </type-function>
    </typedef>
    <typedef name="fd_mask" ref="0x402ffe68" loc="85:/usr/include/sys/select.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fd_mask" ref="0x402ffe68"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint32_t" ref="0x402a7030" loc="391:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
        <typename><typedef-ref name="nx_uint32_t" ref="0x402a7030"/></typename>
      </type-int>
    </typedef>
    <typedef name="hashtable_t" ref="0x404ca6a8" loc="10:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/hashtable.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_log.h">
        <short>&#10; The TOSSIM logging system.</short>
        <long>&#10; The TOSSIM logging system. Unlike in TinyOS 1.x, this logging&#10; system supports an arbitrary number of channels, denoted by&#10; a string identifier. A channel can be connected to any number&#10; of outputs, and a debug statement can be associated with any&#10; number of channels.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x404ca440"/>
        <typename><typedef-ref name="hashtable_t" ref="0x404ca6a8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dev_t" ref="0x402fa8e0" loc="61:/usr/include/sys/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="dev_t" ref="0x402fa8e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_quad_t" ref="0x402ed858" loc="57:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__u_quad_t" ref="0x402ed858"/></typename>
      </type-int>
    </typedef>
    <typedef name="__swblk_t" ref="0x402f4a78" loc="154:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__swblk_t" ref="0x402f4a78"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int32_t" ref="0x402fce90" loc="203:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int32_t" ref="0x402fce90"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsfilcnt_t" ref="0x40309170" loc="244:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fsfilcnt_t" ref="0x40309170"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast8_t" ref="0x401c3538" loc="104:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_fast8_t" ref="0x401c3538"/></typename>
      </type-int>
    </typedef>
    <typedef name="snr_lqi_t" ref="0x409e7ba0" loc="13:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref name="snr_lqi" ref="0x409e7578"/>
        <typename><typedef-ref name="snr_lqi_t" ref="0x409e7ba0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__rlim64_t" ref="0x402efca8" loc="147:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__rlim64_t" ref="0x402efca8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__key_t" ref="0x402f4c88" loc="155:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__key_t" ref="0x402f4c88"/></typename>
      </type-int>
    </typedef>
    <typedef name="__useconds_t" ref="0x402f4398" loc="150:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__useconds_t" ref="0x402f4398"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Assr_t" ref="0x40d90be8" loc="121:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d909c0"/>
        <typename><typedef-ref name="Atm128Assr_t" ref="0x40d90be8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3BL_t" ref="0x40db0a98" loc="277:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3BL_t" ref="0x40db0a98"/></typename>
      </type-int>
    </typedef>
    <typedef name="__io_read_fn" ref="0x40468010" loc="364:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="__ssize_t" ref="0x402f75d0"/></typename>
        </type-int>
        <function-parameters>
          <type-pointer size="I:4" alignment="I:4">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:4" alignment="I:4">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="size_t" ref="0x401b6498"/></typename>
          </type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_read_fn" ref="0x40468010"/></typename>
      </type-function>
    </typedef>
    <typedef name="nx_int16_t" ref="0x402a59f8" loc="386:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nx_int16_t">
        <typename><typedef-ref name="nx_int16_t" ref="0x402a59f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__gwchar_t" ref="0x401c49c0" loc="35:/usr/include/inttypes.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gwchar_t" ref="0x401c49c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR1L_t" ref="0x40dae520" loc="283:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR1L_t" ref="0x40dae520"/></typename>
      </type-int>
    </typedef>
    <typedef name="register_t" ref="0x402fb540" loc="206:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="register_t" ref="0x402fb540"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_barrierattr_t" ref="0x403156f0" loc="216:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x403154c8"/>
        <typename><typedef-ref name="pthread_barrierattr_t" ref="0x403156f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_ETIMSK_t" ref="0x40dac010" loc="300:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40dadd70"/>
        <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x40dac010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128TimerControl_t" ref="0x40d93888" loc="99:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <documentation loc="11:/home/xinchaol/local/src/tinyos-2.x/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d93660"/>
        <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40d93888"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ssize_t" ref="0x402f9af0" loc="110:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ssize_t" ref="0x402f9af0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__quad_t" ref="0x402ed5c8" loc="56:/usr/include/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__quad_t" ref="0x402ed5c8"/></typename>
      </type-int>
    </typedef>
    <typedef name="int32_t" ref="0x401be938" loc="39:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int32_t" ref="0x401be938"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint64_t" ref="0x401c04a0" loc="59:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint64_t" ref="0x401c04a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_long" ref="0x402f6ab8" loc="37:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_long" ref="0x402f6ab8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_atomic_t" ref="0x407bc010" loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__nesc_atomic_t" ref="0x407bc010"/></typename>
      </type-int>
    </typedef>
    <typedef name="_LIB_VERSION_TYPE" ref="0x40440d10" loc="302:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0x404402b0"/>
        <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0x40440d10"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nxle_int64_t" ref="0x402ab6d8" loc="398:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long long" size="I:8" alignment="I:1" network="nxle_int64_t">
        <typename><typedef-ref name="nxle_int64_t" ref="0x402ab6d8"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int16_t" ref="0x402a7d98" loc="396:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nxle_int16_t">
        <typename><typedef-ref name="nxle_int16_t" ref="0x402a7d98"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_t" ref="0x403093f8" loc="50:/usr/include/bits/pthreadtypes.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_t" ref="0x403093f8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blksize_t" ref="0x402f33b0" loc="164:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__blksize_t" ref="0x402f33b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="imaxdiv_t" ref="0x401ca128" loc="292:/usr/include/inttypes.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x401c4ee0"/>
        <typename><typedef-ref name="imaxdiv_t" ref="0x401ca128"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nlink_t" ref="0x402f1978" loc="140:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__nlink_t" ref="0x402f1978"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TCCR1A_t" ref="0x40d89bd8" loc="196:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d89668"/>
        <typename><typedef-ref name="Atm128_TCCR1A_t" ref="0x40d89bd8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__id_t" ref="0x402efed0" loc="148:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__id_t" ref="0x402efed0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least32_t" ref="0x401c16c0" loc="79:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_least32_t" ref="0x401c16c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__mbstate_t" ref="0x4045dd00" loc="95:/usr/include/wchar.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x4045dad8"/>
        <typename><typedef-ref name="__mbstate_t" ref="0x4045dd00"/></typename>
      </type-tag>
    </typedef>
    <typedef name="message_footer_t" ref="0x40685c38" loc="48:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:2" alignment="I:1"><union-ref name="message_footer" ref="0x40685840"/>
        <typename><typedef-ref name="message_footer_t" ref="0x40685c38"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR3BH_t" ref="0x40db0810" loc="276:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3BH_t" ref="0x40db0810"/></typename>
      </type-int>
    </typedef>
    <typedef name="__WAIT_STATUS" ref="0x402dcc00" loc="72:/usr/include/stdlib.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x402dc8c0"/>
        <typename><typedef-ref name="__WAIT_STATUS" ref="0x402dcc00"/></typename>
      </type-tag>
    </typedef>
    <typedef name="UartPacket" ref="0x406c2500" loc="28:BcpCollectionExample.h">
      <documentation loc="12:BcpCollectionExample.h">
        <short>&#10; the UartPacket struct is used for logging purposes.</short>
        <long>&#10; the UartPacket struct is used for logging purposes.&#10;  The eight fields (3x32, 3x16, 2x8) are indicated&#10;  as valid or invalid per the type field.&#10;</long>
      </documentation>
      <type-tag size="I:25" alignment="I:1"><nx_struct-ref name="UartPacket" ref="0x406b2238"/>
        <typename><typedef-ref name="UartPacket" ref="0x406c2500"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__blkcnt64_t" ref="0x402f38c0" loc="170:/usr/include/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__blkcnt64_t" ref="0x402f38c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsblkcnt_t" ref="0x40304e80" loc="240:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="fsblkcnt_t" ref="0x40304e80"/></typename>
      </type-int>
    </typedef>
    <typedef name="off_t" ref="0x402f9460" loc="87:/usr/include/sys/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="off_t" ref="0x402f9460"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_short" ref="0x402eaca0" loc="32:/usr/include/bits/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__u_short" ref="0x402eaca0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int64_t" ref="0x402a82d0" loc="388:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="long long" size="I:8" alignment="I:1" network="nx_int64_t">
        <typename><typedef-ref name="nx_int64_t" ref="0x402a82d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="quad_t" ref="0x402f6cf8" loc="38:/usr/include/sys/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="quad_t" ref="0x402f6cf8"/></typename>
      </type-int>
    </typedef>
    <typedef name="__suseconds_t" ref="0x402f4608" loc="151:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__suseconds_t" ref="0x402f4608"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_barrier_t" ref="0x40315010" loc="210:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:20" alignment="I:4"><union-ref ref="0x40311da0"/>
        <typename><typedef-ref name="pthread_barrier_t" ref="0x40315010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128TimerCtrlClock_t" ref="0x40d82010" loc="250:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d83d58"/>
        <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x40d82010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__int8_t" ref="0x402ee330" loc="37:/usr/include/bits/types.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__int8_t" ref="0x402ee330"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_fpos64_t" ref="0x4045cac8" loc="31:/usr/include/_G_config.h">
      <type-tag size="I:16" alignment="I:4"><struct-ref ref="0x4045c8a0"/>
        <typename><typedef-ref name="_G_fpos64_t" ref="0x4045cac8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__clockid_t" ref="0x402f4ed0" loc="158:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__clockid_t" ref="0x402f4ed0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast16_t" ref="0x401c3788" loc="110:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_fast16_t" ref="0x401c3788"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3AL_t" ref="0x40db0588" loc="275:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3AL_t" ref="0x40db0588"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintmax_t" ref="0x401c45e0" loc="141:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uintmax_t" ref="0x401c45e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_addr_t" ref="0x4067d830" loc="8:/home/xinchaol/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_am_addr_t" ref="0x4067d830"/></typename>
      </type-int>
    </typedef>
    <typedef name="__clock_t" ref="0x402ef7b0" loc="145:/usr/include/bits/types.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__clock_t" ref="0x402ef7b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint16_t" ref="0x402a8ba0" loc="390:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_uint16_t" ref="0x402a8ba0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__rlim_t" ref="0x402efa10" loc="146:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__rlim_t" ref="0x402efa10"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_quad_t" ref="0x402fa010" loc="39:/usr/include/sys/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_quad_t" ref="0x402fa010"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast32_t" ref="0x401c3048" loc="98:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_fast32_t" ref="0x401c3048"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least16_t" ref="0x401c0978" loc="67:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int_least16_t" ref="0x401c0978"/></typename>
      </type-int>
    </typedef>
    <typedef name="ldiv_t" ref="0x402df800" loc="110:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x402df5d8"/>
        <typename><typedef-ref name="ldiv_t" ref="0x402df800"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int64_t" ref="0x402fb1f0" loc="204:/usr/include/sys/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_int64_t" ref="0x402fb1f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int16_t" ref="0x402fcb40" loc="202:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_int16_t" ref="0x402fcb40"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TIFR_t" ref="0x40d8da68" loc="154:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8d840"/>
        <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40d8da68"/></typename>
      </type-tag>
    </typedef>
    <typedef name="bcp_delay_header_t" ref="0x40ba9640" loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/Bcp.h">
      <type-tag size="I:10" alignment="I:1"><nx_struct-ref ref="0x40ba9358"/>
        <typename><typedef-ref name="bcp_delay_header_t" ref="0x40ba9640"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_TCCR3A_t" ref="0x40d89f20" loc="199:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d89668"/>
        <typename><typedef-ref name="Atm128_TCCR3A_t" ref="0x40d89f20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_least64_t" ref="0x401c1968" loc="84:/usr/include/stdint.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_least64_t" ref="0x401c1968"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int32_t" ref="0x402eec18" loc="41:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__int32_t" ref="0x402eec18"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_int32_t" ref="0x4045b170" loc="54:/usr/include/_G_config.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_G_int32_t" ref="0x4045b170"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_rwlock_t" ref="0x40312d38" loc="189:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:32" alignment="I:4"><union-ref ref="0x40312ab0"/>
        <typename><typedef-ref name="pthread_rwlock_t" ref="0x40312d38"/></typename>
      </type-tag>
    </typedef>
    <typedef name="double_t" ref="0x40359aa8" loc="40:/usr/include/bits/mathdef.h">
      <type-float cname="long double" size="I:12" alignment="I:4">
        <typename><typedef-ref name="double_t" ref="0x40359aa8"/></typename>
      </type-float>
    </typedef>
    <typedef name="lqi_dist_t" ref="0x409e72f0" loc="7:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-tag size="I:12" alignment="I:4"><struct-ref name="lqi_dist" ref="0x409bee78"/>
        <typename><typedef-ref name="lqi_dist_t" ref="0x409e72f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fd_mask" ref="0x402ff310" loc="55:/usr/include/sys/select.h">
      <type-int cname="long" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__fd_mask" ref="0x402ff310"/></typename>
      </type-int>
    </typedef>
    <typedef name="bool" ref="0x404b9548" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x404b9548"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsblkcnt64_t" ref="0x402f3e18" loc="174:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsblkcnt64_t" ref="0x402f3e18"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_hash_t" ref="0x40563a40" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-tag size="I:480" alignment="I:4"><struct-ref name="sim_noise_hash_t" ref="0x40554e28"/>
        <typename><typedef-ref name="sim_noise_hash_t" ref="0x40563a40"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__FILE" ref="0x4045d0d8" loc="65:/usr/include/stdio.h">
      <type-tag size="I:148" alignment="I:4"><struct-ref name="_IO_FILE" ref="0x40454bb8"/>
        <typename><typedef-ref name="__FILE" ref="0x4045d0d8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__gnuc_va_list" ref="0x4045bb98" loc="40:/usr/lib/gcc/i686-linux-gnu/4.4.5/include/stdarg.h">
      <type-pointer size="I:4" alignment="I:4">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x40026f48"/></type-tag>
        <typename><typedef-ref name="__gnuc_va_list" ref="0x4045bb98"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="nxle_uint8_t" ref="0x402abb58" loc="399:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nxle_uint8_t">
        <typename><typedef-ref name="nxle_uint8_t" ref="0x402abb58"/></typename>
      </type-int>
    </typedef>
    <typedef name="__off64_t" ref="0x402f1e28" loc="142:/usr/include/bits/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__off64_t" ref="0x402f1e28"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ICR3H_t" ref="0x40dae7a0" loc="284:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ICR3H_t" ref="0x40dae7a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsfilcnt64_t" ref="0x402f73a8" loc="178:/usr/include/bits/types.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsfilcnt64_t" ref="0x402f73a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3AH_t" ref="0x40db0300" loc="274:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3AH_t" ref="0x40db0300"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_OCR3CL_t" ref="0x40dae010" loc="279:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR3CL_t" ref="0x40dae010"/></typename>
      </type-int>
    </typedef>
    <typedef name="int64_t" ref="0x401beb78" loc="44:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int64_t" ref="0x401beb78"/></typename>
      </type-int>
    </typedef>
    <typedef name="int16_t" ref="0x401be748" loc="38:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int16_t" ref="0x401be748"/></typename>
      </type-int>
    </typedef>
    <typedef name="ulong" ref="0x402fc068" loc="151:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ulong" ref="0x402fc068"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast64_t" ref="0x401c32c0" loc="100:/usr/include/stdint.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_fast64_t" ref="0x401c32c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uid_t" ref="0x402f9238" loc="81:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uid_t" ref="0x402f9238"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_t" ref="0x40696248" loc="19:/home/xinchaol/local/src/tinyos-2.x/tos/types/message.h">
      <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40684490"/>
        <typename><typedef-ref name="message_t" ref="0x40696248"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nx_uint64_t" ref="0x402a74a8" loc="392:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:1" network="nx_uint64_t">
        <typename><typedef-ref name="nx_uint64_t" ref="0x402a74a8"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_TIMSK_t" ref="0x40d8e358" loc="137:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d8e130"/>
        <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x40d8e358"/></typename>
      </type-tag>
    </typedef>
    <typedef name="loff_t" ref="0x402fa490" loc="45:/usr/include/sys/types.h">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="loff_t" ref="0x402fa490"/></typename>
      </type-int>
    </typedef>
    <typedef name="__socklen_t" ref="0x402f61a0" loc="192:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__socklen_t" ref="0x402f61a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="node_t" ref="0x4051d960" loc="54:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/heap.c">
      <type-tag size="I:12" alignment="I:4"><struct-ref name="node" ref="0x4051d4f8"/>
        <typename><typedef-ref name="node_t" ref="0x4051d960"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uid_t" ref="0x402edd50" loc="135:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uid_t" ref="0x402edd50"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int8_t" ref="0x402a55a0" loc="385:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
        <typename><typedef-ref name="nx_int8_t" ref="0x402a55a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_node_t" ref="0x40561188" loc="76:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-tag size="I:184" alignment="I:4"><struct-ref name="sim_noise_node_t" ref="0x40563d28"/>
        <typename><typedef-ref name="sim_noise_node_t" ref="0x40561188"/></typename>
      </type-tag>
    </typedef>
    <typedef name="id_t" ref="0x402f98a0" loc="105:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="id_t" ref="0x402f98a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutex_t" ref="0x4030b900" loc="104:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:24" alignment="I:4"><union-ref ref="0x4030b678"/>
        <typename><typedef-ref name="pthread_mutex_t" ref="0x4030b900"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__itimer_which_t" ref="0x4054ca78" loc="122:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__itimer_which_t" ref="0x4054ca78"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_cond_t" ref="0x4030f6f8" loc="130:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:48" alignment="I:4"><union-ref ref="0x4030f470"/>
        <typename><typedef-ref name="pthread_cond_t" ref="0x4030f6f8"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_key_t" ref="0x4030d048" loc="140:/usr/include/bits/pthreadtypes.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_key_t" ref="0x4030d048"/></typename>
      </type-int>
    </typedef>
    <typedef name="ino_t" ref="0x402fa6b8" loc="49:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="ino_t" ref="0x402fa6b8"/></typename>
      </type-int>
    </typedef>
    <typedef name="daddr_t" ref="0x402f9d40" loc="116:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="daddr_t" ref="0x402f9d40"/></typename>
      </type-int>
    </typedef>
    <typedef name="__timezone_ptr_t" ref="0x40550ac8" loc="63:/usr/include/sys/time.h">
      <documentation loc="24:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/sim_mote.h">
        <short>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.</short>
        <long>&#10; The C functions that allow TOSSIM-side code to access the SimMoteP&#10; component.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-qualified __restrict="">
          <typename><typedef-ref name="__timezone_ptr_t" ref="0x40550ac8"/></typename>
        <type-pointer size="I:4" alignment="I:4">
          <type-tag size="I:8" alignment="I:4"><struct-ref name="timezone" ref="0x40550458"/></type-tag>
        </type-pointer>
      </type-qualified>
    </typedef>
    <typedef name="nxle_uint32_t" ref="0x402aa4c0" loc="401:/usr/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nxle_uint32_t">
        <typename><typedef-ref name="nxle_uint32_t" ref="0x402aa4c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="key_t" ref="0x402f8238" loc="123:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="key_t" ref="0x402f8238"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutexattr_t" ref="0x4030a010" loc="110:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x4030bda0"/>
        <typename><typedef-ref name="pthread_mutexattr_t" ref="0x4030a010"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__pthread_slist_t" ref="0x40307218" loc="70:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref name="__pthread_internal_slist" ref="0x40309d38"/>
        <typename><typedef-ref name="__pthread_slist_t" ref="0x40307218"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uart_id_t" ref="0x4068cb30" loc="72:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <documentation loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uart_id_t" ref="0x4068cb30"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128TimerCtrlCompare_t" ref="0x40d89890" loc="193:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40d89668"/>
        <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x40d89890"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128_OCR1CH_t" ref="0x40d81db8" loc="270:/home/xinchaol/local/src/tinyos-2.x/tos/chips/atm128/timer/Atm128Timer.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_OCR1CH_t" ref="0x40d81db8"/></typename>
      </type-int>
    </typedef>
    <typedef name="BCPMsg" ref="0x40724248" loc="57:BcpCollectionExampleC.nc">
      <component-ref qname="BcpCollectionExampleC"/>
      <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="BCPMsg" scoped="" ref="0x40714ec8"/>
        <typename><typedef-ref name="BCPMsg" scoped="" ref="0x40724248"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_syncDoneTask" ref="0x409be6e8" loc="39:/home/xinchaol/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-array elements="I:0" size="I:0" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="receive_message_t" ref="0x40a53098" loc="57:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:52" alignment="I:4"><struct-ref name="receive_message" scoped="" ref="0x40a33da0"/>
        <typename><typedef-ref name="receive_message_t" scoped="" ref="0x40a53098"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_read_rssi_task" ref="0x409bc010" loc="499:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-array elements="I:1" size="I:4" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_startDoneTask" ref="0x40ab06a0" loc="88:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_stopDoneTask" ref="0x40ab1ce0" loc="93:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:3" size="I:12" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendDoneTask" ref="0x40ab13c8" loc="137:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:4" size="I:16" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendDataTask" ref="0x40cd7440" loc="335:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-array elements="I:7" size="I:28" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendBeaconTask" ref="0x40cd6670" loc="254:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-array elements="I:5" size="I:20" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_snoopHandlerTask" ref="0x40cd7d70" loc="286:/home/xinchaol/local/src/tinyos-2.x/tos/lib/net/bcp/BcpForwardingEngineP.nc">
      <component-ref qname="BcpForwardingEngineP"/>
      <type-array elements="I:6" size="I:24" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_fired" ref="0x40d98130" loc="63:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="AlarmToTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_updateFromTimer" ref="0x40e98048" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="Timer_t" ref="0x40ec4188" loc="55:/home/xinchaol/local/src/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="VirtualizeTimerC"/>
      <type-tag size="I:12" alignment="I:4"><struct-ref scoped="" ref="0x40ec5df8"/>
        <typename><typedef-ref name="Timer_t" scoped="" ref="0x40ec4188"/></typename>
      </type-tag>
    </typedef>
    <typedef name="queue_entry_t" ref="0x40f17c08" loc="49:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-tag size="I:4" alignment="I:4"><struct-ref scoped="" ref="0x40f17a40"/>
        <typename><typedef-ref name="queue_entry_t" scoped="" ref="0x40f17c08"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_errorTask" ref="0x40ee6988" loc="161:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_CancelTask" ref="0x40f1b318" loc="118:/home/xinchaol/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendTask" ref="0x40fa9010" loc="32:SafeSerialSendM.nc">
      <component-ref qname="SafeSerialSendM"/>
      <type-array elements="I:12" size="I:48" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_stopDone" ref="0x40ff9820" loc="60:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-array elements="I:14" size="I:56" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_startDone" ref="0x41000168" loc="59:/home/xinchaol/local/src/tinyos-2.x/tos/lib/tossim/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-array elements="I:13" size="I:52" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
  </typedefs>
</nesc>
